//
// Copyright (c) Meta Platforms, Inc. and affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: proto/idb.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - idb.CompanionService

/// Namespace containing generated types for the "idb.CompanionService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Idb_CompanionService {
    /// Service descriptor for the "idb.CompanionService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "connect" metadata.
        internal enum connect {
            /// Request type for "connect".
            internal typealias Input = Idb_ConnectRequest
            /// Response type for "connect".
            internal typealias Output = Idb_ConnectResponse
            /// Descriptor for "connect".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "connect"
            )
        }
        /// Namespace for "debugserver" metadata.
        internal enum debugserver {
            /// Request type for "debugserver".
            internal typealias Input = Idb_DebugServerRequest
            /// Response type for "debugserver".
            internal typealias Output = Idb_DebugServerResponse
            /// Descriptor for "debugserver".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "debugserver"
            )
        }
        /// Namespace for "dap" metadata.
        internal enum dap {
            /// Request type for "dap".
            internal typealias Input = Idb_DapRequest
            /// Response type for "dap".
            internal typealias Output = Idb_DapResponse
            /// Descriptor for "dap".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "dap"
            )
        }
        /// Namespace for "describe" metadata.
        internal enum describe {
            /// Request type for "describe".
            internal typealias Input = Idb_TargetDescriptionRequest
            /// Response type for "describe".
            internal typealias Output = Idb_TargetDescriptionResponse
            /// Descriptor for "describe".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "describe"
            )
        }
        /// Namespace for "install" metadata.
        internal enum install {
            /// Request type for "install".
            internal typealias Input = Idb_InstallRequest
            /// Response type for "install".
            internal typealias Output = Idb_InstallResponse
            /// Descriptor for "install".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "install"
            )
        }
        /// Namespace for "instruments_run" metadata.
        internal enum instruments_run {
            /// Request type for "instruments_run".
            internal typealias Input = Idb_InstrumentsRunRequest
            /// Response type for "instruments_run".
            internal typealias Output = Idb_InstrumentsRunResponse
            /// Descriptor for "instruments_run".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "instruments_run"
            )
        }
        /// Namespace for "log" metadata.
        internal enum log {
            /// Request type for "log".
            internal typealias Input = Idb_LogRequest
            /// Response type for "log".
            internal typealias Output = Idb_LogResponse
            /// Descriptor for "log".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "log"
            )
        }
        /// Namespace for "xctrace_record" metadata.
        internal enum xctrace_record {
            /// Request type for "xctrace_record".
            internal typealias Input = Idb_XctraceRecordRequest
            /// Response type for "xctrace_record".
            internal typealias Output = Idb_XctraceRecordResponse
            /// Descriptor for "xctrace_record".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "xctrace_record"
            )
        }
        /// Namespace for "accessibility_info" metadata.
        internal enum accessibility_info {
            /// Request type for "accessibility_info".
            internal typealias Input = Idb_AccessibilityInfoRequest
            /// Response type for "accessibility_info".
            internal typealias Output = Idb_AccessibilityInfoResponse
            /// Descriptor for "accessibility_info".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "accessibility_info"
            )
        }
        /// Namespace for "focus" metadata.
        internal enum focus {
            /// Request type for "focus".
            internal typealias Input = Idb_FocusRequest
            /// Response type for "focus".
            internal typealias Output = Idb_FocusResponse
            /// Descriptor for "focus".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "focus"
            )
        }
        /// Namespace for "hid" metadata.
        internal enum hid {
            /// Request type for "hid".
            internal typealias Input = Idb_HIDEvent
            /// Response type for "hid".
            internal typealias Output = Idb_HIDResponse
            /// Descriptor for "hid".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "hid"
            )
        }
        /// Namespace for "open_url" metadata.
        internal enum open_url {
            /// Request type for "open_url".
            internal typealias Input = Idb_OpenUrlRequest
            /// Response type for "open_url".
            internal typealias Output = Idb_OpenUrlRequest
            /// Descriptor for "open_url".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "open_url"
            )
        }
        /// Namespace for "set_location" metadata.
        internal enum set_location {
            /// Request type for "set_location".
            internal typealias Input = Idb_SetLocationRequest
            /// Response type for "set_location".
            internal typealias Output = Idb_SetLocationResponse
            /// Descriptor for "set_location".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "set_location"
            )
        }
        /// Namespace for "send_notification" metadata.
        internal enum send_notification {
            /// Request type for "send_notification".
            internal typealias Input = Idb_SendNotificationRequest
            /// Response type for "send_notification".
            internal typealias Output = Idb_SendNotificationResponse
            /// Descriptor for "send_notification".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "send_notification"
            )
        }
        /// Namespace for "simulate_memory_warning" metadata.
        internal enum simulate_memory_warning {
            /// Request type for "simulate_memory_warning".
            internal typealias Input = Idb_SimulateMemoryWarningRequest
            /// Response type for "simulate_memory_warning".
            internal typealias Output = Idb_SimulateMemoryWarningResponse
            /// Descriptor for "simulate_memory_warning".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "simulate_memory_warning"
            )
        }
        /// Namespace for "approve" metadata.
        internal enum approve {
            /// Request type for "approve".
            internal typealias Input = Idb_ApproveRequest
            /// Response type for "approve".
            internal typealias Output = Idb_ApproveResponse
            /// Descriptor for "approve".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "approve"
            )
        }
        /// Namespace for "revoke" metadata.
        internal enum revoke {
            /// Request type for "revoke".
            internal typealias Input = Idb_RevokeRequest
            /// Response type for "revoke".
            internal typealias Output = Idb_RevokeResponse
            /// Descriptor for "revoke".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "revoke"
            )
        }
        /// Namespace for "clear_keychain" metadata.
        internal enum clear_keychain {
            /// Request type for "clear_keychain".
            internal typealias Input = Idb_ClearKeychainRequest
            /// Response type for "clear_keychain".
            internal typealias Output = Idb_ClearKeychainResponse
            /// Descriptor for "clear_keychain".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "clear_keychain"
            )
        }
        /// Namespace for "contacts_update" metadata.
        internal enum contacts_update {
            /// Request type for "contacts_update".
            internal typealias Input = Idb_ContactsUpdateRequest
            /// Response type for "contacts_update".
            internal typealias Output = Idb_ContactsUpdateResponse
            /// Descriptor for "contacts_update".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "contacts_update"
            )
        }
        /// Namespace for "setting" metadata.
        internal enum setting {
            /// Request type for "setting".
            internal typealias Input = Idb_SettingRequest
            /// Response type for "setting".
            internal typealias Output = Idb_SettingResponse
            /// Descriptor for "setting".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "setting"
            )
        }
        /// Namespace for "get_setting" metadata.
        internal enum get_setting {
            /// Request type for "get_setting".
            internal typealias Input = Idb_GetSettingRequest
            /// Response type for "get_setting".
            internal typealias Output = Idb_GetSettingResponse
            /// Descriptor for "get_setting".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "get_setting"
            )
        }
        /// Namespace for "list_settings" metadata.
        internal enum list_settings {
            /// Request type for "list_settings".
            internal typealias Input = Idb_ListSettingRequest
            /// Response type for "list_settings".
            internal typealias Output = Idb_ListSettingResponse
            /// Descriptor for "list_settings".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "list_settings"
            )
        }
        /// Namespace for "launch" metadata.
        internal enum launch {
            /// Request type for "launch".
            internal typealias Input = Idb_LaunchRequest
            /// Response type for "launch".
            internal typealias Output = Idb_LaunchResponse
            /// Descriptor for "launch".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "launch"
            )
        }
        /// Namespace for "list_apps" metadata.
        internal enum list_apps {
            /// Request type for "list_apps".
            internal typealias Input = Idb_ListAppsRequest
            /// Response type for "list_apps".
            internal typealias Output = Idb_ListAppsResponse
            /// Descriptor for "list_apps".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "list_apps"
            )
        }
        /// Namespace for "terminate" metadata.
        internal enum terminate {
            /// Request type for "terminate".
            internal typealias Input = Idb_TerminateRequest
            /// Response type for "terminate".
            internal typealias Output = Idb_TerminateResponse
            /// Descriptor for "terminate".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "terminate"
            )
        }
        /// Namespace for "uninstall" metadata.
        internal enum uninstall {
            /// Request type for "uninstall".
            internal typealias Input = Idb_UninstallRequest
            /// Response type for "uninstall".
            internal typealias Output = Idb_UninstallResponse
            /// Descriptor for "uninstall".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "uninstall"
            )
        }
        /// Namespace for "add_media" metadata.
        internal enum add_media {
            /// Request type for "add_media".
            internal typealias Input = Idb_AddMediaRequest
            /// Response type for "add_media".
            internal typealias Output = Idb_AddMediaResponse
            /// Descriptor for "add_media".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "add_media"
            )
        }
        /// Namespace for "record" metadata.
        internal enum record {
            /// Request type for "record".
            internal typealias Input = Idb_RecordRequest
            /// Response type for "record".
            internal typealias Output = Idb_RecordResponse
            /// Descriptor for "record".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "record"
            )
        }
        /// Namespace for "screenshot" metadata.
        internal enum screenshot {
            /// Request type for "screenshot".
            internal typealias Input = Idb_ScreenshotRequest
            /// Response type for "screenshot".
            internal typealias Output = Idb_ScreenshotResponse
            /// Descriptor for "screenshot".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "screenshot"
            )
        }
        /// Namespace for "video_stream" metadata.
        internal enum video_stream {
            /// Request type for "video_stream".
            internal typealias Input = Idb_VideoStreamRequest
            /// Response type for "video_stream".
            internal typealias Output = Idb_VideoStreamResponse
            /// Descriptor for "video_stream".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "video_stream"
            )
        }
        /// Namespace for "crash_delete" metadata.
        internal enum crash_delete {
            /// Request type for "crash_delete".
            internal typealias Input = Idb_CrashLogQuery
            /// Response type for "crash_delete".
            internal typealias Output = Idb_CrashLogResponse
            /// Descriptor for "crash_delete".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "crash_delete"
            )
        }
        /// Namespace for "crash_list" metadata.
        internal enum crash_list {
            /// Request type for "crash_list".
            internal typealias Input = Idb_CrashLogQuery
            /// Response type for "crash_list".
            internal typealias Output = Idb_CrashLogResponse
            /// Descriptor for "crash_list".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "crash_list"
            )
        }
        /// Namespace for "crash_show" metadata.
        internal enum crash_show {
            /// Request type for "crash_show".
            internal typealias Input = Idb_CrashShowRequest
            /// Response type for "crash_show".
            internal typealias Output = Idb_CrashShowResponse
            /// Descriptor for "crash_show".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "crash_show"
            )
        }
        /// Namespace for "xctest_list_bundles" metadata.
        internal enum xctest_list_bundles {
            /// Request type for "xctest_list_bundles".
            internal typealias Input = Idb_XctestListBundlesRequest
            /// Response type for "xctest_list_bundles".
            internal typealias Output = Idb_XctestListBundlesResponse
            /// Descriptor for "xctest_list_bundles".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "xctest_list_bundles"
            )
        }
        /// Namespace for "xctest_list_tests" metadata.
        internal enum xctest_list_tests {
            /// Request type for "xctest_list_tests".
            internal typealias Input = Idb_XctestListTestsRequest
            /// Response type for "xctest_list_tests".
            internal typealias Output = Idb_XctestListTestsResponse
            /// Descriptor for "xctest_list_tests".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "xctest_list_tests"
            )
        }
        /// Namespace for "xctest_run" metadata.
        internal enum xctest_run {
            /// Request type for "xctest_run".
            internal typealias Input = Idb_XctestRunRequest
            /// Response type for "xctest_run".
            internal typealias Output = Idb_XctestRunResponse
            /// Descriptor for "xctest_run".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "xctest_run"
            )
        }
        /// Namespace for "ls" metadata.
        internal enum ls {
            /// Request type for "ls".
            internal typealias Input = Idb_LsRequest
            /// Response type for "ls".
            internal typealias Output = Idb_LsResponse
            /// Descriptor for "ls".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "ls"
            )
        }
        /// Namespace for "mkdir" metadata.
        internal enum mkdir {
            /// Request type for "mkdir".
            internal typealias Input = Idb_MkdirRequest
            /// Response type for "mkdir".
            internal typealias Output = Idb_MkdirResponse
            /// Descriptor for "mkdir".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "mkdir"
            )
        }
        /// Namespace for "mv" metadata.
        internal enum mv {
            /// Request type for "mv".
            internal typealias Input = Idb_MvRequest
            /// Response type for "mv".
            internal typealias Output = Idb_MvResponse
            /// Descriptor for "mv".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "mv"
            )
        }
        /// Namespace for "rm" metadata.
        internal enum rm {
            /// Request type for "rm".
            internal typealias Input = Idb_RmRequest
            /// Response type for "rm".
            internal typealias Output = Idb_RmResponse
            /// Descriptor for "rm".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "rm"
            )
        }
        /// Namespace for "pull" metadata.
        internal enum pull {
            /// Request type for "pull".
            internal typealias Input = Idb_PullRequest
            /// Response type for "pull".
            internal typealias Output = Idb_PullResponse
            /// Descriptor for "pull".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "pull"
            )
        }
        /// Namespace for "push" metadata.
        internal enum push {
            /// Request type for "push".
            internal typealias Input = Idb_PushRequest
            /// Response type for "push".
            internal typealias Output = Idb_PushResponse
            /// Descriptor for "push".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "push"
            )
        }
        /// Namespace for "tail" metadata.
        internal enum tail {
            /// Request type for "tail".
            internal typealias Input = Idb_TailRequest
            /// Response type for "tail".
            internal typealias Output = Idb_TailResponse
            /// Descriptor for "tail".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService"),
                method: "tail"
            )
        }
        /// Descriptors for all methods in the "idb.CompanionService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            connect.descriptor,
            debugserver.descriptor,
            dap.descriptor,
            describe.descriptor,
            install.descriptor,
            instruments_run.descriptor,
            log.descriptor,
            xctrace_record.descriptor,
            accessibility_info.descriptor,
            focus.descriptor,
            hid.descriptor,
            open_url.descriptor,
            set_location.descriptor,
            send_notification.descriptor,
            simulate_memory_warning.descriptor,
            approve.descriptor,
            revoke.descriptor,
            clear_keychain.descriptor,
            contacts_update.descriptor,
            setting.descriptor,
            get_setting.descriptor,
            list_settings.descriptor,
            launch.descriptor,
            list_apps.descriptor,
            terminate.descriptor,
            uninstall.descriptor,
            add_media.descriptor,
            record.descriptor,
            screenshot.descriptor,
            video_stream.descriptor,
            crash_delete.descriptor,
            crash_list.descriptor,
            crash_show.descriptor,
            xctest_list_bundles.descriptor,
            xctest_list_tests.descriptor,
            xctest_run.descriptor,
            ls.descriptor,
            mkdir.descriptor,
            mv.descriptor,
            rm.descriptor,
            pull.descriptor,
            push.descriptor,
            tail.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "idb.CompanionService" service.
    internal static let idb_CompanionService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "idb.CompanionService")
}

// MARK: idb.CompanionService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService {
    /// Streaming variant of the service protocol for the "idb.CompanionService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The idb companion service definition.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "connect" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Management
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ConnectRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ConnectResponse` messages.
        func connect(
            request: GRPCCore.StreamingServerRequest<Idb_ConnectRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ConnectResponse>

        /// Handle the "debugserver" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_DebugServerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_DebugServerResponse` messages.
        func debugserver(
            request: GRPCCore.StreamingServerRequest<Idb_DebugServerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_DebugServerResponse>

        /// Handle the "dap" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_DapRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_DapResponse` messages.
        func dap(
            request: GRPCCore.StreamingServerRequest<Idb_DapRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_DapResponse>

        /// Handle the "describe" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_TargetDescriptionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_TargetDescriptionResponse` messages.
        func describe(
            request: GRPCCore.StreamingServerRequest<Idb_TargetDescriptionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_TargetDescriptionResponse>

        /// Handle the "install" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_InstallRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_InstallResponse` messages.
        func install(
            request: GRPCCore.StreamingServerRequest<Idb_InstallRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_InstallResponse>

        /// Handle the "instruments_run" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_InstrumentsRunRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_InstrumentsRunResponse` messages.
        func instruments_run(
            request: GRPCCore.StreamingServerRequest<Idb_InstrumentsRunRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_InstrumentsRunResponse>

        /// Handle the "log" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_LogRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_LogResponse` messages.
        func log(
            request: GRPCCore.StreamingServerRequest<Idb_LogRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_LogResponse>

        /// Handle the "xctrace_record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_XctraceRecordRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_XctraceRecordResponse` messages.
        func xctrace_record(
            request: GRPCCore.StreamingServerRequest<Idb_XctraceRecordRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctraceRecordResponse>

        /// Handle the "accessibility_info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Interaction
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_AccessibilityInfoRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_AccessibilityInfoResponse` messages.
        func accessibility_info(
            request: GRPCCore.StreamingServerRequest<Idb_AccessibilityInfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_AccessibilityInfoResponse>

        /// Handle the "focus" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_FocusRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_FocusResponse` messages.
        func focus(
            request: GRPCCore.StreamingServerRequest<Idb_FocusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_FocusResponse>

        /// Handle the "hid" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_HIDEvent` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_HIDResponse` messages.
        func hid(
            request: GRPCCore.StreamingServerRequest<Idb_HIDEvent>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_HIDResponse>

        /// Handle the "open_url" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_OpenUrlRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_OpenUrlRequest` messages.
        func open_url(
            request: GRPCCore.StreamingServerRequest<Idb_OpenUrlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_OpenUrlRequest>

        /// Handle the "set_location" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_SetLocationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_SetLocationResponse` messages.
        func set_location(
            request: GRPCCore.StreamingServerRequest<Idb_SetLocationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_SetLocationResponse>

        /// Handle the "send_notification" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_SendNotificationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_SendNotificationResponse` messages.
        func send_notification(
            request: GRPCCore.StreamingServerRequest<Idb_SendNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_SendNotificationResponse>

        /// Handle the "simulate_memory_warning" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_SimulateMemoryWarningRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_SimulateMemoryWarningResponse` messages.
        func simulate_memory_warning(
            request: GRPCCore.StreamingServerRequest<Idb_SimulateMemoryWarningRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_SimulateMemoryWarningResponse>

        /// Handle the "approve" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Settings
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ApproveRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ApproveResponse` messages.
        func approve(
            request: GRPCCore.StreamingServerRequest<Idb_ApproveRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ApproveResponse>

        /// Handle the "revoke" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_RevokeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_RevokeResponse` messages.
        func revoke(
            request: GRPCCore.StreamingServerRequest<Idb_RevokeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_RevokeResponse>

        /// Handle the "clear_keychain" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ClearKeychainRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ClearKeychainResponse` messages.
        func clear_keychain(
            request: GRPCCore.StreamingServerRequest<Idb_ClearKeychainRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ClearKeychainResponse>

        /// Handle the "contacts_update" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ContactsUpdateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ContactsUpdateResponse` messages.
        func contacts_update(
            request: GRPCCore.StreamingServerRequest<Idb_ContactsUpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ContactsUpdateResponse>

        /// Handle the "setting" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_SettingRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_SettingResponse` messages.
        func setting(
            request: GRPCCore.StreamingServerRequest<Idb_SettingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_SettingResponse>

        /// Handle the "get_setting" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_GetSettingRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_GetSettingResponse` messages.
        func get_setting(
            request: GRPCCore.StreamingServerRequest<Idb_GetSettingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_GetSettingResponse>

        /// Handle the "list_settings" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ListSettingRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ListSettingResponse` messages.
        func list_settings(
            request: GRPCCore.StreamingServerRequest<Idb_ListSettingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ListSettingResponse>

        /// Handle the "launch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > App
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_LaunchRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_LaunchResponse` messages.
        func launch(
            request: GRPCCore.StreamingServerRequest<Idb_LaunchRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_LaunchResponse>

        /// Handle the "list_apps" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ListAppsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ListAppsResponse` messages.
        func list_apps(
            request: GRPCCore.StreamingServerRequest<Idb_ListAppsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ListAppsResponse>

        /// Handle the "terminate" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_TerminateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_TerminateResponse` messages.
        func terminate(
            request: GRPCCore.StreamingServerRequest<Idb_TerminateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_TerminateResponse>

        /// Handle the "uninstall" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_UninstallRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_UninstallResponse` messages.
        func uninstall(
            request: GRPCCore.StreamingServerRequest<Idb_UninstallRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_UninstallResponse>

        /// Handle the "add_media" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Video/Audio
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_AddMediaRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_AddMediaResponse` messages.
        func add_media(
            request: GRPCCore.StreamingServerRequest<Idb_AddMediaRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_AddMediaResponse>

        /// Handle the "record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_RecordRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_RecordResponse` messages.
        func record(
            request: GRPCCore.StreamingServerRequest<Idb_RecordRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_RecordResponse>

        /// Handle the "screenshot" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_ScreenshotRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_ScreenshotResponse` messages.
        func screenshot(
            request: GRPCCore.StreamingServerRequest<Idb_ScreenshotRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_ScreenshotResponse>

        /// Handle the "video_stream" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_VideoStreamRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_VideoStreamResponse` messages.
        func video_stream(
            request: GRPCCore.StreamingServerRequest<Idb_VideoStreamRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_VideoStreamResponse>

        /// Handle the "crash_delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Crash Operations
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_CrashLogQuery` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_CrashLogResponse` messages.
        func crash_delete(
            request: GRPCCore.StreamingServerRequest<Idb_CrashLogQuery>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_CrashLogResponse>

        /// Handle the "crash_list" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_CrashLogQuery` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_CrashLogResponse` messages.
        func crash_list(
            request: GRPCCore.StreamingServerRequest<Idb_CrashLogQuery>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_CrashLogResponse>

        /// Handle the "crash_show" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_CrashShowRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_CrashShowResponse` messages.
        func crash_show(
            request: GRPCCore.StreamingServerRequest<Idb_CrashShowRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_CrashShowResponse>

        /// Handle the "xctest_list_bundles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > xctest operations
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_XctestListBundlesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_XctestListBundlesResponse` messages.
        func xctest_list_bundles(
            request: GRPCCore.StreamingServerRequest<Idb_XctestListBundlesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestListBundlesResponse>

        /// Handle the "xctest_list_tests" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_XctestListTestsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_XctestListTestsResponse` messages.
        func xctest_list_tests(
            request: GRPCCore.StreamingServerRequest<Idb_XctestListTestsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestListTestsResponse>

        /// Handle the "xctest_run" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_XctestRunRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_XctestRunResponse` messages.
        func xctest_run(
            request: GRPCCore.StreamingServerRequest<Idb_XctestRunRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestRunResponse>

        /// Handle the "ls" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > File Operations
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_LsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_LsResponse` messages.
        func ls(
            request: GRPCCore.StreamingServerRequest<Idb_LsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_LsResponse>

        /// Handle the "mkdir" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_MkdirRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_MkdirResponse` messages.
        func mkdir(
            request: GRPCCore.StreamingServerRequest<Idb_MkdirRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_MkdirResponse>

        /// Handle the "mv" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_MvRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_MvResponse` messages.
        func mv(
            request: GRPCCore.StreamingServerRequest<Idb_MvRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_MvResponse>

        /// Handle the "rm" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_RmRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_RmResponse` messages.
        func rm(
            request: GRPCCore.StreamingServerRequest<Idb_RmRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_RmResponse>

        /// Handle the "pull" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_PullRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_PullResponse` messages.
        func pull(
            request: GRPCCore.StreamingServerRequest<Idb_PullRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_PullResponse>

        /// Handle the "push" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_PushRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_PushResponse` messages.
        func push(
            request: GRPCCore.StreamingServerRequest<Idb_PushRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_PushResponse>

        /// Handle the "tail" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_TailRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_TailResponse` messages.
        func tail(
            request: GRPCCore.StreamingServerRequest<Idb_TailRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_TailResponse>
    }

    /// Service protocol for the "idb.CompanionService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The idb companion service definition.
    internal protocol ServiceProtocol: Idb_CompanionService.StreamingServiceProtocol {
        /// Handle the "connect" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Management
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ConnectRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ConnectResponse` message.
        func connect(
            request: GRPCCore.ServerRequest<Idb_ConnectRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ConnectResponse>

        /// Handle the "debugserver" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_DebugServerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_DebugServerResponse` messages.
        func debugserver(
            request: GRPCCore.StreamingServerRequest<Idb_DebugServerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_DebugServerResponse>

        /// Handle the "dap" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_DapRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_DapResponse` messages.
        func dap(
            request: GRPCCore.StreamingServerRequest<Idb_DapRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_DapResponse>

        /// Handle the "describe" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_TargetDescriptionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_TargetDescriptionResponse` message.
        func describe(
            request: GRPCCore.ServerRequest<Idb_TargetDescriptionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_TargetDescriptionResponse>

        /// Handle the "install" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_InstallRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_InstallResponse` messages.
        func install(
            request: GRPCCore.StreamingServerRequest<Idb_InstallRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_InstallResponse>

        /// Handle the "instruments_run" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_InstrumentsRunRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_InstrumentsRunResponse` messages.
        func instruments_run(
            request: GRPCCore.StreamingServerRequest<Idb_InstrumentsRunRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_InstrumentsRunResponse>

        /// Handle the "log" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_LogRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_LogResponse` messages.
        func log(
            request: GRPCCore.ServerRequest<Idb_LogRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_LogResponse>

        /// Handle the "xctrace_record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_XctraceRecordRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_XctraceRecordResponse` messages.
        func xctrace_record(
            request: GRPCCore.StreamingServerRequest<Idb_XctraceRecordRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctraceRecordResponse>

        /// Handle the "accessibility_info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Interaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_AccessibilityInfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_AccessibilityInfoResponse` message.
        func accessibility_info(
            request: GRPCCore.ServerRequest<Idb_AccessibilityInfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_AccessibilityInfoResponse>

        /// Handle the "focus" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_FocusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_FocusResponse` message.
        func focus(
            request: GRPCCore.ServerRequest<Idb_FocusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_FocusResponse>

        /// Handle the "hid" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_HIDEvent` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_HIDResponse` message.
        func hid(
            request: GRPCCore.StreamingServerRequest<Idb_HIDEvent>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_HIDResponse>

        /// Handle the "open_url" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_OpenUrlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_OpenUrlRequest` message.
        func open_url(
            request: GRPCCore.ServerRequest<Idb_OpenUrlRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_OpenUrlRequest>

        /// Handle the "set_location" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SetLocationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_SetLocationResponse` message.
        func set_location(
            request: GRPCCore.ServerRequest<Idb_SetLocationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_SetLocationResponse>

        /// Handle the "send_notification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SendNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_SendNotificationResponse` message.
        func send_notification(
            request: GRPCCore.ServerRequest<Idb_SendNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_SendNotificationResponse>

        /// Handle the "simulate_memory_warning" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SimulateMemoryWarningRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_SimulateMemoryWarningResponse` message.
        func simulate_memory_warning(
            request: GRPCCore.ServerRequest<Idb_SimulateMemoryWarningRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_SimulateMemoryWarningResponse>

        /// Handle the "approve" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Settings
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ApproveRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ApproveResponse` message.
        func approve(
            request: GRPCCore.ServerRequest<Idb_ApproveRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ApproveResponse>

        /// Handle the "revoke" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_RevokeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_RevokeResponse` message.
        func revoke(
            request: GRPCCore.ServerRequest<Idb_RevokeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_RevokeResponse>

        /// Handle the "clear_keychain" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ClearKeychainRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ClearKeychainResponse` message.
        func clear_keychain(
            request: GRPCCore.ServerRequest<Idb_ClearKeychainRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ClearKeychainResponse>

        /// Handle the "contacts_update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ContactsUpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ContactsUpdateResponse` message.
        func contacts_update(
            request: GRPCCore.ServerRequest<Idb_ContactsUpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ContactsUpdateResponse>

        /// Handle the "setting" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SettingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_SettingResponse` message.
        func setting(
            request: GRPCCore.ServerRequest<Idb_SettingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_SettingResponse>

        /// Handle the "get_setting" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_GetSettingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_GetSettingResponse` message.
        func get_setting(
            request: GRPCCore.ServerRequest<Idb_GetSettingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_GetSettingResponse>

        /// Handle the "list_settings" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ListSettingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ListSettingResponse` message.
        func list_settings(
            request: GRPCCore.ServerRequest<Idb_ListSettingRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ListSettingResponse>

        /// Handle the "launch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > App
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_LaunchRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_LaunchResponse` messages.
        func launch(
            request: GRPCCore.StreamingServerRequest<Idb_LaunchRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_LaunchResponse>

        /// Handle the "list_apps" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ListAppsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ListAppsResponse` message.
        func list_apps(
            request: GRPCCore.ServerRequest<Idb_ListAppsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ListAppsResponse>

        /// Handle the "terminate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_TerminateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_TerminateResponse` message.
        func terminate(
            request: GRPCCore.ServerRequest<Idb_TerminateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_TerminateResponse>

        /// Handle the "uninstall" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_UninstallRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_UninstallResponse` message.
        func uninstall(
            request: GRPCCore.ServerRequest<Idb_UninstallRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_UninstallResponse>

        /// Handle the "add_media" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Video/Audio
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_AddMediaRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_AddMediaResponse` message.
        func add_media(
            request: GRPCCore.StreamingServerRequest<Idb_AddMediaRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_AddMediaResponse>

        /// Handle the "record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_RecordRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_RecordResponse` messages.
        func record(
            request: GRPCCore.StreamingServerRequest<Idb_RecordRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_RecordResponse>

        /// Handle the "screenshot" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ScreenshotRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_ScreenshotResponse` message.
        func screenshot(
            request: GRPCCore.ServerRequest<Idb_ScreenshotRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_ScreenshotResponse>

        /// Handle the "video_stream" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_VideoStreamRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_VideoStreamResponse` messages.
        func video_stream(
            request: GRPCCore.StreamingServerRequest<Idb_VideoStreamRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_VideoStreamResponse>

        /// Handle the "crash_delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Crash Operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashLogQuery` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_CrashLogResponse` message.
        func crash_delete(
            request: GRPCCore.ServerRequest<Idb_CrashLogQuery>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_CrashLogResponse>

        /// Handle the "crash_list" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashLogQuery` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_CrashLogResponse` message.
        func crash_list(
            request: GRPCCore.ServerRequest<Idb_CrashLogQuery>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_CrashLogResponse>

        /// Handle the "crash_show" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashShowRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_CrashShowResponse` message.
        func crash_show(
            request: GRPCCore.ServerRequest<Idb_CrashShowRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_CrashShowResponse>

        /// Handle the "xctest_list_bundles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > xctest operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestListBundlesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_XctestListBundlesResponse` message.
        func xctest_list_bundles(
            request: GRPCCore.ServerRequest<Idb_XctestListBundlesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_XctestListBundlesResponse>

        /// Handle the "xctest_list_tests" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestListTestsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_XctestListTestsResponse` message.
        func xctest_list_tests(
            request: GRPCCore.ServerRequest<Idb_XctestListTestsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_XctestListTestsResponse>

        /// Handle the "xctest_run" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestRunRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_XctestRunResponse` messages.
        func xctest_run(
            request: GRPCCore.ServerRequest<Idb_XctestRunRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestRunResponse>

        /// Handle the "ls" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > File Operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_LsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_LsResponse` message.
        func ls(
            request: GRPCCore.ServerRequest<Idb_LsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_LsResponse>

        /// Handle the "mkdir" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_MkdirRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_MkdirResponse` message.
        func mkdir(
            request: GRPCCore.ServerRequest<Idb_MkdirRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_MkdirResponse>

        /// Handle the "mv" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_MvRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_MvResponse` message.
        func mv(
            request: GRPCCore.ServerRequest<Idb_MvRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_MvResponse>

        /// Handle the "rm" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_RmRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_RmResponse` message.
        func rm(
            request: GRPCCore.ServerRequest<Idb_RmRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_RmResponse>

        /// Handle the "pull" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_PullRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_PullResponse` messages.
        func pull(
            request: GRPCCore.ServerRequest<Idb_PullRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_PullResponse>

        /// Handle the "push" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_PushRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Idb_PushResponse` message.
        func push(
            request: GRPCCore.StreamingServerRequest<Idb_PushRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Idb_PushResponse>

        /// Handle the "tail" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Idb_TailRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Idb_TailResponse` messages.
        func tail(
            request: GRPCCore.StreamingServerRequest<Idb_TailRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Idb_TailResponse>
    }

    /// Simple service protocol for the "idb.CompanionService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The idb companion service definition.
    internal protocol SimpleServiceProtocol: Idb_CompanionService.ServiceProtocol {
        /// Handle the "connect" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Management
        ///
        /// - Parameters:
        ///   - request: A `Idb_ConnectRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ConnectResponse` to respond with.
        func connect(
            request: Idb_ConnectRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ConnectResponse

        /// Handle the "debugserver" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_DebugServerRequest` messages.
        ///   - response: A response stream of `Idb_DebugServerResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func debugserver(
            request: GRPCCore.RPCAsyncSequence<Idb_DebugServerRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_DebugServerResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "dap" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_DapRequest` messages.
        ///   - response: A response stream of `Idb_DapResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func dap(
            request: GRPCCore.RPCAsyncSequence<Idb_DapRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_DapResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "describe" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_TargetDescriptionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_TargetDescriptionResponse` to respond with.
        func describe(
            request: Idb_TargetDescriptionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_TargetDescriptionResponse

        /// Handle the "install" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_InstallRequest` messages.
        ///   - response: A response stream of `Idb_InstallResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func install(
            request: GRPCCore.RPCAsyncSequence<Idb_InstallRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_InstallResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "instruments_run" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_InstrumentsRunRequest` messages.
        ///   - response: A response stream of `Idb_InstrumentsRunResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func instruments_run(
            request: GRPCCore.RPCAsyncSequence<Idb_InstrumentsRunRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_InstrumentsRunResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "log" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_LogRequest` message.
        ///   - response: A response stream of `Idb_LogResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func log(
            request: Idb_LogRequest,
            response: GRPCCore.RPCWriter<Idb_LogResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "xctrace_record" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_XctraceRecordRequest` messages.
        ///   - response: A response stream of `Idb_XctraceRecordResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func xctrace_record(
            request: GRPCCore.RPCAsyncSequence<Idb_XctraceRecordRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_XctraceRecordResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "accessibility_info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Interaction
        ///
        /// - Parameters:
        ///   - request: A `Idb_AccessibilityInfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_AccessibilityInfoResponse` to respond with.
        func accessibility_info(
            request: Idb_AccessibilityInfoRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_AccessibilityInfoResponse

        /// Handle the "focus" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_FocusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_FocusResponse` to respond with.
        func focus(
            request: Idb_FocusRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_FocusResponse

        /// Handle the "hid" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_HIDEvent` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_HIDResponse` to respond with.
        func hid(
            request: GRPCCore.RPCAsyncSequence<Idb_HIDEvent, any Swift.Error>,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_HIDResponse

        /// Handle the "open_url" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_OpenUrlRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_OpenUrlRequest` to respond with.
        func open_url(
            request: Idb_OpenUrlRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_OpenUrlRequest

        /// Handle the "set_location" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_SetLocationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_SetLocationResponse` to respond with.
        func set_location(
            request: Idb_SetLocationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_SetLocationResponse

        /// Handle the "send_notification" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_SendNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_SendNotificationResponse` to respond with.
        func send_notification(
            request: Idb_SendNotificationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_SendNotificationResponse

        /// Handle the "simulate_memory_warning" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_SimulateMemoryWarningRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_SimulateMemoryWarningResponse` to respond with.
        func simulate_memory_warning(
            request: Idb_SimulateMemoryWarningRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_SimulateMemoryWarningResponse

        /// Handle the "approve" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Settings
        ///
        /// - Parameters:
        ///   - request: A `Idb_ApproveRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ApproveResponse` to respond with.
        func approve(
            request: Idb_ApproveRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ApproveResponse

        /// Handle the "revoke" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_RevokeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_RevokeResponse` to respond with.
        func revoke(
            request: Idb_RevokeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_RevokeResponse

        /// Handle the "clear_keychain" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_ClearKeychainRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ClearKeychainResponse` to respond with.
        func clear_keychain(
            request: Idb_ClearKeychainRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ClearKeychainResponse

        /// Handle the "contacts_update" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_ContactsUpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ContactsUpdateResponse` to respond with.
        func contacts_update(
            request: Idb_ContactsUpdateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ContactsUpdateResponse

        /// Handle the "setting" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_SettingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_SettingResponse` to respond with.
        func setting(
            request: Idb_SettingRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_SettingResponse

        /// Handle the "get_setting" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_GetSettingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_GetSettingResponse` to respond with.
        func get_setting(
            request: Idb_GetSettingRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_GetSettingResponse

        /// Handle the "list_settings" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_ListSettingRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ListSettingResponse` to respond with.
        func list_settings(
            request: Idb_ListSettingRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ListSettingResponse

        /// Handle the "launch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > App
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_LaunchRequest` messages.
        ///   - response: A response stream of `Idb_LaunchResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func launch(
            request: GRPCCore.RPCAsyncSequence<Idb_LaunchRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_LaunchResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "list_apps" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_ListAppsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ListAppsResponse` to respond with.
        func list_apps(
            request: Idb_ListAppsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ListAppsResponse

        /// Handle the "terminate" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_TerminateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_TerminateResponse` to respond with.
        func terminate(
            request: Idb_TerminateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_TerminateResponse

        /// Handle the "uninstall" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_UninstallRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_UninstallResponse` to respond with.
        func uninstall(
            request: Idb_UninstallRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_UninstallResponse

        /// Handle the "add_media" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Video/Audio
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_AddMediaRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_AddMediaResponse` to respond with.
        func add_media(
            request: GRPCCore.RPCAsyncSequence<Idb_AddMediaRequest, any Swift.Error>,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_AddMediaResponse

        /// Handle the "record" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_RecordRequest` messages.
        ///   - response: A response stream of `Idb_RecordResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func record(
            request: GRPCCore.RPCAsyncSequence<Idb_RecordRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_RecordResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "screenshot" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_ScreenshotRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_ScreenshotResponse` to respond with.
        func screenshot(
            request: Idb_ScreenshotRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_ScreenshotResponse

        /// Handle the "video_stream" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_VideoStreamRequest` messages.
        ///   - response: A response stream of `Idb_VideoStreamResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func video_stream(
            request: GRPCCore.RPCAsyncSequence<Idb_VideoStreamRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_VideoStreamResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "crash_delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Crash Operations
        ///
        /// - Parameters:
        ///   - request: A `Idb_CrashLogQuery` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_CrashLogResponse` to respond with.
        func crash_delete(
            request: Idb_CrashLogQuery,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_CrashLogResponse

        /// Handle the "crash_list" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_CrashLogQuery` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_CrashLogResponse` to respond with.
        func crash_list(
            request: Idb_CrashLogQuery,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_CrashLogResponse

        /// Handle the "crash_show" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_CrashShowRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_CrashShowResponse` to respond with.
        func crash_show(
            request: Idb_CrashShowRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_CrashShowResponse

        /// Handle the "xctest_list_bundles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > xctest operations
        ///
        /// - Parameters:
        ///   - request: A `Idb_XctestListBundlesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_XctestListBundlesResponse` to respond with.
        func xctest_list_bundles(
            request: Idb_XctestListBundlesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_XctestListBundlesResponse

        /// Handle the "xctest_list_tests" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_XctestListTestsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_XctestListTestsResponse` to respond with.
        func xctest_list_tests(
            request: Idb_XctestListTestsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_XctestListTestsResponse

        /// Handle the "xctest_run" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_XctestRunRequest` message.
        ///   - response: A response stream of `Idb_XctestRunResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func xctest_run(
            request: Idb_XctestRunRequest,
            response: GRPCCore.RPCWriter<Idb_XctestRunResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "ls" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > File Operations
        ///
        /// - Parameters:
        ///   - request: A `Idb_LsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_LsResponse` to respond with.
        func ls(
            request: Idb_LsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_LsResponse

        /// Handle the "mkdir" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_MkdirRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_MkdirResponse` to respond with.
        func mkdir(
            request: Idb_MkdirRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_MkdirResponse

        /// Handle the "mv" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_MvRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_MvResponse` to respond with.
        func mv(
            request: Idb_MvRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_MvResponse

        /// Handle the "rm" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_RmRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_RmResponse` to respond with.
        func rm(
            request: Idb_RmRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_RmResponse

        /// Handle the "pull" method.
        ///
        /// - Parameters:
        ///   - request: A `Idb_PullRequest` message.
        ///   - response: A response stream of `Idb_PullResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func pull(
            request: Idb_PullRequest,
            response: GRPCCore.RPCWriter<Idb_PullResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "push" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_PushRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Idb_PushResponse` to respond with.
        func push(
            request: GRPCCore.RPCAsyncSequence<Idb_PushRequest, any Swift.Error>,
            context: GRPCCore.ServerContext
        ) async throws -> Idb_PushResponse

        /// Handle the "tail" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Idb_TailRequest` messages.
        ///   - response: A response stream of `Idb_TailResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func tail(
            request: GRPCCore.RPCAsyncSequence<Idb_TailRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Idb_TailResponse>,
            context: GRPCCore.ServerContext
        ) async throws
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.connect.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ConnectRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ConnectResponse>(),
            handler: { request, context in
                try await self.connect(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.debugserver.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_DebugServerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_DebugServerResponse>(),
            handler: { request, context in
                try await self.debugserver(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.dap.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_DapRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_DapResponse>(),
            handler: { request, context in
                try await self.dap(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.describe.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_TargetDescriptionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_TargetDescriptionResponse>(),
            handler: { request, context in
                try await self.describe(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.install.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_InstallRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_InstallResponse>(),
            handler: { request, context in
                try await self.install(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.instruments_run.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_InstrumentsRunRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_InstrumentsRunResponse>(),
            handler: { request, context in
                try await self.instruments_run(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.log.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_LogRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_LogResponse>(),
            handler: { request, context in
                try await self.log(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.xctrace_record.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctraceRecordRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctraceRecordResponse>(),
            handler: { request, context in
                try await self.xctrace_record(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.accessibility_info.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_AccessibilityInfoRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_AccessibilityInfoResponse>(),
            handler: { request, context in
                try await self.accessibility_info(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.focus.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_FocusRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_FocusResponse>(),
            handler: { request, context in
                try await self.focus(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.hid.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_HIDEvent>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_HIDResponse>(),
            handler: { request, context in
                try await self.hid(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.open_url.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_OpenUrlRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_OpenUrlRequest>(),
            handler: { request, context in
                try await self.open_url(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.set_location.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SetLocationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SetLocationResponse>(),
            handler: { request, context in
                try await self.set_location(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.send_notification.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SendNotificationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SendNotificationResponse>(),
            handler: { request, context in
                try await self.send_notification(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.simulate_memory_warning.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SimulateMemoryWarningRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SimulateMemoryWarningResponse>(),
            handler: { request, context in
                try await self.simulate_memory_warning(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.approve.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ApproveRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ApproveResponse>(),
            handler: { request, context in
                try await self.approve(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.revoke.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_RevokeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_RevokeResponse>(),
            handler: { request, context in
                try await self.revoke(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.clear_keychain.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ClearKeychainRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ClearKeychainResponse>(),
            handler: { request, context in
                try await self.clear_keychain(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.contacts_update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ContactsUpdateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ContactsUpdateResponse>(),
            handler: { request, context in
                try await self.contacts_update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.setting.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SettingRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SettingResponse>(),
            handler: { request, context in
                try await self.setting(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.get_setting.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_GetSettingRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_GetSettingResponse>(),
            handler: { request, context in
                try await self.get_setting(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.list_settings.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ListSettingRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ListSettingResponse>(),
            handler: { request, context in
                try await self.list_settings(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.launch.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_LaunchRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_LaunchResponse>(),
            handler: { request, context in
                try await self.launch(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.list_apps.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ListAppsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ListAppsResponse>(),
            handler: { request, context in
                try await self.list_apps(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.terminate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_TerminateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_TerminateResponse>(),
            handler: { request, context in
                try await self.terminate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.uninstall.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_UninstallRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_UninstallResponse>(),
            handler: { request, context in
                try await self.uninstall(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.add_media.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_AddMediaRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_AddMediaResponse>(),
            handler: { request, context in
                try await self.add_media(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.record.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_RecordRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_RecordResponse>(),
            handler: { request, context in
                try await self.record(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.screenshot.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ScreenshotRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ScreenshotResponse>(),
            handler: { request, context in
                try await self.screenshot(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.video_stream.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_VideoStreamRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_VideoStreamResponse>(),
            handler: { request, context in
                try await self.video_stream(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.crash_delete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_CrashLogQuery>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_CrashLogResponse>(),
            handler: { request, context in
                try await self.crash_delete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.crash_list.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_CrashLogQuery>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_CrashLogResponse>(),
            handler: { request, context in
                try await self.crash_list(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.crash_show.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_CrashShowRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_CrashShowResponse>(),
            handler: { request, context in
                try await self.crash_show(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.xctest_list_bundles.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctestListBundlesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctestListBundlesResponse>(),
            handler: { request, context in
                try await self.xctest_list_bundles(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.xctest_list_tests.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctestListTestsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctestListTestsResponse>(),
            handler: { request, context in
                try await self.xctest_list_tests(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.xctest_run.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctestRunRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctestRunResponse>(),
            handler: { request, context in
                try await self.xctest_run(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.ls.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_LsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_LsResponse>(),
            handler: { request, context in
                try await self.ls(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.mkdir.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_MkdirRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_MkdirResponse>(),
            handler: { request, context in
                try await self.mkdir(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.mv.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_MvRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_MvResponse>(),
            handler: { request, context in
                try await self.mv(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.rm.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_RmRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_RmResponse>(),
            handler: { request, context in
                try await self.rm(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.pull.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_PullRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_PullResponse>(),
            handler: { request, context in
                try await self.pull(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.push.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_PushRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_PushResponse>(),
            handler: { request, context in
                try await self.push(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Idb_CompanionService.Method.tail.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_TailRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_TailResponse>(),
            handler: { request, context in
                try await self.tail(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService.ServiceProtocol {
    internal func connect(
        request: GRPCCore.StreamingServerRequest<Idb_ConnectRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ConnectResponse> {
        let response = try await self.connect(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func describe(
        request: GRPCCore.StreamingServerRequest<Idb_TargetDescriptionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_TargetDescriptionResponse> {
        let response = try await self.describe(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func log(
        request: GRPCCore.StreamingServerRequest<Idb_LogRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_LogResponse> {
        let response = try await self.log(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func accessibility_info(
        request: GRPCCore.StreamingServerRequest<Idb_AccessibilityInfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_AccessibilityInfoResponse> {
        let response = try await self.accessibility_info(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func focus(
        request: GRPCCore.StreamingServerRequest<Idb_FocusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_FocusResponse> {
        let response = try await self.focus(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func hid(
        request: GRPCCore.StreamingServerRequest<Idb_HIDEvent>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_HIDResponse> {
        let response = try await self.hid(
            request: request,
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func open_url(
        request: GRPCCore.StreamingServerRequest<Idb_OpenUrlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_OpenUrlRequest> {
        let response = try await self.open_url(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func set_location(
        request: GRPCCore.StreamingServerRequest<Idb_SetLocationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_SetLocationResponse> {
        let response = try await self.set_location(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func send_notification(
        request: GRPCCore.StreamingServerRequest<Idb_SendNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_SendNotificationResponse> {
        let response = try await self.send_notification(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func simulate_memory_warning(
        request: GRPCCore.StreamingServerRequest<Idb_SimulateMemoryWarningRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_SimulateMemoryWarningResponse> {
        let response = try await self.simulate_memory_warning(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func approve(
        request: GRPCCore.StreamingServerRequest<Idb_ApproveRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ApproveResponse> {
        let response = try await self.approve(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func revoke(
        request: GRPCCore.StreamingServerRequest<Idb_RevokeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_RevokeResponse> {
        let response = try await self.revoke(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func clear_keychain(
        request: GRPCCore.StreamingServerRequest<Idb_ClearKeychainRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ClearKeychainResponse> {
        let response = try await self.clear_keychain(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func contacts_update(
        request: GRPCCore.StreamingServerRequest<Idb_ContactsUpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ContactsUpdateResponse> {
        let response = try await self.contacts_update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func setting(
        request: GRPCCore.StreamingServerRequest<Idb_SettingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_SettingResponse> {
        let response = try await self.setting(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func get_setting(
        request: GRPCCore.StreamingServerRequest<Idb_GetSettingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_GetSettingResponse> {
        let response = try await self.get_setting(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func list_settings(
        request: GRPCCore.StreamingServerRequest<Idb_ListSettingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ListSettingResponse> {
        let response = try await self.list_settings(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func list_apps(
        request: GRPCCore.StreamingServerRequest<Idb_ListAppsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ListAppsResponse> {
        let response = try await self.list_apps(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func terminate(
        request: GRPCCore.StreamingServerRequest<Idb_TerminateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_TerminateResponse> {
        let response = try await self.terminate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func uninstall(
        request: GRPCCore.StreamingServerRequest<Idb_UninstallRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_UninstallResponse> {
        let response = try await self.uninstall(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func add_media(
        request: GRPCCore.StreamingServerRequest<Idb_AddMediaRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_AddMediaResponse> {
        let response = try await self.add_media(
            request: request,
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func screenshot(
        request: GRPCCore.StreamingServerRequest<Idb_ScreenshotRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_ScreenshotResponse> {
        let response = try await self.screenshot(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func crash_delete(
        request: GRPCCore.StreamingServerRequest<Idb_CrashLogQuery>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_CrashLogResponse> {
        let response = try await self.crash_delete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func crash_list(
        request: GRPCCore.StreamingServerRequest<Idb_CrashLogQuery>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_CrashLogResponse> {
        let response = try await self.crash_list(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func crash_show(
        request: GRPCCore.StreamingServerRequest<Idb_CrashShowRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_CrashShowResponse> {
        let response = try await self.crash_show(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func xctest_list_bundles(
        request: GRPCCore.StreamingServerRequest<Idb_XctestListBundlesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestListBundlesResponse> {
        let response = try await self.xctest_list_bundles(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func xctest_list_tests(
        request: GRPCCore.StreamingServerRequest<Idb_XctestListTestsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestListTestsResponse> {
        let response = try await self.xctest_list_tests(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func xctest_run(
        request: GRPCCore.StreamingServerRequest<Idb_XctestRunRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestRunResponse> {
        let response = try await self.xctest_run(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func ls(
        request: GRPCCore.StreamingServerRequest<Idb_LsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_LsResponse> {
        let response = try await self.ls(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func mkdir(
        request: GRPCCore.StreamingServerRequest<Idb_MkdirRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_MkdirResponse> {
        let response = try await self.mkdir(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func mv(
        request: GRPCCore.StreamingServerRequest<Idb_MvRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_MvResponse> {
        let response = try await self.mv(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func rm(
        request: GRPCCore.StreamingServerRequest<Idb_RmRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_RmResponse> {
        let response = try await self.rm(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func pull(
        request: GRPCCore.StreamingServerRequest<Idb_PullRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_PullResponse> {
        let response = try await self.pull(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func push(
        request: GRPCCore.StreamingServerRequest<Idb_PushRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_PushResponse> {
        let response = try await self.push(
            request: request,
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService.SimpleServiceProtocol {
    internal func connect(
        request: GRPCCore.ServerRequest<Idb_ConnectRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ConnectResponse> {
        return GRPCCore.ServerResponse<Idb_ConnectResponse>(
            message: try await self.connect(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func debugserver(
        request: GRPCCore.StreamingServerRequest<Idb_DebugServerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_DebugServerResponse> {
        return GRPCCore.StreamingServerResponse<Idb_DebugServerResponse>(
            metadata: [:],
            producer: { writer in
                try await self.debugserver(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func dap(
        request: GRPCCore.StreamingServerRequest<Idb_DapRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_DapResponse> {
        return GRPCCore.StreamingServerResponse<Idb_DapResponse>(
            metadata: [:],
            producer: { writer in
                try await self.dap(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func describe(
        request: GRPCCore.ServerRequest<Idb_TargetDescriptionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_TargetDescriptionResponse> {
        return GRPCCore.ServerResponse<Idb_TargetDescriptionResponse>(
            message: try await self.describe(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func install(
        request: GRPCCore.StreamingServerRequest<Idb_InstallRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_InstallResponse> {
        return GRPCCore.StreamingServerResponse<Idb_InstallResponse>(
            metadata: [:],
            producer: { writer in
                try await self.install(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func instruments_run(
        request: GRPCCore.StreamingServerRequest<Idb_InstrumentsRunRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_InstrumentsRunResponse> {
        return GRPCCore.StreamingServerResponse<Idb_InstrumentsRunResponse>(
            metadata: [:],
            producer: { writer in
                try await self.instruments_run(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func log(
        request: GRPCCore.ServerRequest<Idb_LogRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_LogResponse> {
        return GRPCCore.StreamingServerResponse<Idb_LogResponse>(
            metadata: [:],
            producer: { writer in
                try await self.log(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func xctrace_record(
        request: GRPCCore.StreamingServerRequest<Idb_XctraceRecordRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctraceRecordResponse> {
        return GRPCCore.StreamingServerResponse<Idb_XctraceRecordResponse>(
            metadata: [:],
            producer: { writer in
                try await self.xctrace_record(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func accessibility_info(
        request: GRPCCore.ServerRequest<Idb_AccessibilityInfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_AccessibilityInfoResponse> {
        return GRPCCore.ServerResponse<Idb_AccessibilityInfoResponse>(
            message: try await self.accessibility_info(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func focus(
        request: GRPCCore.ServerRequest<Idb_FocusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_FocusResponse> {
        return GRPCCore.ServerResponse<Idb_FocusResponse>(
            message: try await self.focus(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func hid(
        request: GRPCCore.StreamingServerRequest<Idb_HIDEvent>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_HIDResponse> {
        return GRPCCore.ServerResponse<Idb_HIDResponse>(
            message: try await self.hid(
                request: request.messages,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func open_url(
        request: GRPCCore.ServerRequest<Idb_OpenUrlRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_OpenUrlRequest> {
        return GRPCCore.ServerResponse<Idb_OpenUrlRequest>(
            message: try await self.open_url(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func set_location(
        request: GRPCCore.ServerRequest<Idb_SetLocationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_SetLocationResponse> {
        return GRPCCore.ServerResponse<Idb_SetLocationResponse>(
            message: try await self.set_location(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func send_notification(
        request: GRPCCore.ServerRequest<Idb_SendNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_SendNotificationResponse> {
        return GRPCCore.ServerResponse<Idb_SendNotificationResponse>(
            message: try await self.send_notification(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func simulate_memory_warning(
        request: GRPCCore.ServerRequest<Idb_SimulateMemoryWarningRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_SimulateMemoryWarningResponse> {
        return GRPCCore.ServerResponse<Idb_SimulateMemoryWarningResponse>(
            message: try await self.simulate_memory_warning(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func approve(
        request: GRPCCore.ServerRequest<Idb_ApproveRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ApproveResponse> {
        return GRPCCore.ServerResponse<Idb_ApproveResponse>(
            message: try await self.approve(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func revoke(
        request: GRPCCore.ServerRequest<Idb_RevokeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_RevokeResponse> {
        return GRPCCore.ServerResponse<Idb_RevokeResponse>(
            message: try await self.revoke(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func clear_keychain(
        request: GRPCCore.ServerRequest<Idb_ClearKeychainRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ClearKeychainResponse> {
        return GRPCCore.ServerResponse<Idb_ClearKeychainResponse>(
            message: try await self.clear_keychain(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func contacts_update(
        request: GRPCCore.ServerRequest<Idb_ContactsUpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ContactsUpdateResponse> {
        return GRPCCore.ServerResponse<Idb_ContactsUpdateResponse>(
            message: try await self.contacts_update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func setting(
        request: GRPCCore.ServerRequest<Idb_SettingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_SettingResponse> {
        return GRPCCore.ServerResponse<Idb_SettingResponse>(
            message: try await self.setting(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func get_setting(
        request: GRPCCore.ServerRequest<Idb_GetSettingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_GetSettingResponse> {
        return GRPCCore.ServerResponse<Idb_GetSettingResponse>(
            message: try await self.get_setting(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func list_settings(
        request: GRPCCore.ServerRequest<Idb_ListSettingRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ListSettingResponse> {
        return GRPCCore.ServerResponse<Idb_ListSettingResponse>(
            message: try await self.list_settings(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func launch(
        request: GRPCCore.StreamingServerRequest<Idb_LaunchRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_LaunchResponse> {
        return GRPCCore.StreamingServerResponse<Idb_LaunchResponse>(
            metadata: [:],
            producer: { writer in
                try await self.launch(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func list_apps(
        request: GRPCCore.ServerRequest<Idb_ListAppsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ListAppsResponse> {
        return GRPCCore.ServerResponse<Idb_ListAppsResponse>(
            message: try await self.list_apps(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func terminate(
        request: GRPCCore.ServerRequest<Idb_TerminateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_TerminateResponse> {
        return GRPCCore.ServerResponse<Idb_TerminateResponse>(
            message: try await self.terminate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func uninstall(
        request: GRPCCore.ServerRequest<Idb_UninstallRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_UninstallResponse> {
        return GRPCCore.ServerResponse<Idb_UninstallResponse>(
            message: try await self.uninstall(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func add_media(
        request: GRPCCore.StreamingServerRequest<Idb_AddMediaRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_AddMediaResponse> {
        return GRPCCore.ServerResponse<Idb_AddMediaResponse>(
            message: try await self.add_media(
                request: request.messages,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func record(
        request: GRPCCore.StreamingServerRequest<Idb_RecordRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_RecordResponse> {
        return GRPCCore.StreamingServerResponse<Idb_RecordResponse>(
            metadata: [:],
            producer: { writer in
                try await self.record(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func screenshot(
        request: GRPCCore.ServerRequest<Idb_ScreenshotRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_ScreenshotResponse> {
        return GRPCCore.ServerResponse<Idb_ScreenshotResponse>(
            message: try await self.screenshot(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func video_stream(
        request: GRPCCore.StreamingServerRequest<Idb_VideoStreamRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_VideoStreamResponse> {
        return GRPCCore.StreamingServerResponse<Idb_VideoStreamResponse>(
            metadata: [:],
            producer: { writer in
                try await self.video_stream(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func crash_delete(
        request: GRPCCore.ServerRequest<Idb_CrashLogQuery>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_CrashLogResponse> {
        return GRPCCore.ServerResponse<Idb_CrashLogResponse>(
            message: try await self.crash_delete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func crash_list(
        request: GRPCCore.ServerRequest<Idb_CrashLogQuery>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_CrashLogResponse> {
        return GRPCCore.ServerResponse<Idb_CrashLogResponse>(
            message: try await self.crash_list(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func crash_show(
        request: GRPCCore.ServerRequest<Idb_CrashShowRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_CrashShowResponse> {
        return GRPCCore.ServerResponse<Idb_CrashShowResponse>(
            message: try await self.crash_show(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func xctest_list_bundles(
        request: GRPCCore.ServerRequest<Idb_XctestListBundlesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_XctestListBundlesResponse> {
        return GRPCCore.ServerResponse<Idb_XctestListBundlesResponse>(
            message: try await self.xctest_list_bundles(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func xctest_list_tests(
        request: GRPCCore.ServerRequest<Idb_XctestListTestsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_XctestListTestsResponse> {
        return GRPCCore.ServerResponse<Idb_XctestListTestsResponse>(
            message: try await self.xctest_list_tests(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func xctest_run(
        request: GRPCCore.ServerRequest<Idb_XctestRunRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_XctestRunResponse> {
        return GRPCCore.StreamingServerResponse<Idb_XctestRunResponse>(
            metadata: [:],
            producer: { writer in
                try await self.xctest_run(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func ls(
        request: GRPCCore.ServerRequest<Idb_LsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_LsResponse> {
        return GRPCCore.ServerResponse<Idb_LsResponse>(
            message: try await self.ls(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func mkdir(
        request: GRPCCore.ServerRequest<Idb_MkdirRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_MkdirResponse> {
        return GRPCCore.ServerResponse<Idb_MkdirResponse>(
            message: try await self.mkdir(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func mv(
        request: GRPCCore.ServerRequest<Idb_MvRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_MvResponse> {
        return GRPCCore.ServerResponse<Idb_MvResponse>(
            message: try await self.mv(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func rm(
        request: GRPCCore.ServerRequest<Idb_RmRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_RmResponse> {
        return GRPCCore.ServerResponse<Idb_RmResponse>(
            message: try await self.rm(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func pull(
        request: GRPCCore.ServerRequest<Idb_PullRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_PullResponse> {
        return GRPCCore.StreamingServerResponse<Idb_PullResponse>(
            metadata: [:],
            producer: { writer in
                try await self.pull(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func push(
        request: GRPCCore.StreamingServerRequest<Idb_PushRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Idb_PushResponse> {
        return GRPCCore.ServerResponse<Idb_PushResponse>(
            message: try await self.push(
                request: request.messages,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func tail(
        request: GRPCCore.StreamingServerRequest<Idb_TailRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Idb_TailResponse> {
        return GRPCCore.StreamingServerResponse<Idb_TailResponse>(
            metadata: [:],
            producer: { writer in
                try await self.tail(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }
}

// MARK: idb.CompanionService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService {
    /// Generated client protocol for the "idb.CompanionService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The idb companion service definition.
    internal protocol ClientProtocol: Sendable {
        /// Call the "connect" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Management
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ConnectRequest` message.
        ///   - serializer: A serializer for `Idb_ConnectRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ConnectResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func connect<Result>(
            request: GRPCCore.ClientRequest<Idb_ConnectRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ConnectRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ConnectResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ConnectResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "debugserver" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_DebugServerRequest` messages.
        ///   - serializer: A serializer for `Idb_DebugServerRequest` messages.
        ///   - deserializer: A deserializer for `Idb_DebugServerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func debugserver<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_DebugServerRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_DebugServerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_DebugServerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DebugServerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "dap" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_DapRequest` messages.
        ///   - serializer: A serializer for `Idb_DapRequest` messages.
        ///   - deserializer: A deserializer for `Idb_DapResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func dap<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_DapRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_DapRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_DapResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DapResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "describe" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_TargetDescriptionRequest` message.
        ///   - serializer: A serializer for `Idb_TargetDescriptionRequest` messages.
        ///   - deserializer: A deserializer for `Idb_TargetDescriptionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describe<Result>(
            request: GRPCCore.ClientRequest<Idb_TargetDescriptionRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_TargetDescriptionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_TargetDescriptionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TargetDescriptionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "install" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_InstallRequest` messages.
        ///   - serializer: A serializer for `Idb_InstallRequest` messages.
        ///   - deserializer: A deserializer for `Idb_InstallResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func install<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_InstallRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_InstallRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_InstallResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstallResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "instruments_run" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_InstrumentsRunRequest` messages.
        ///   - serializer: A serializer for `Idb_InstrumentsRunRequest` messages.
        ///   - deserializer: A deserializer for `Idb_InstrumentsRunResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func instruments_run<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_InstrumentsRunRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_InstrumentsRunRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_InstrumentsRunResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstrumentsRunResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "log" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_LogRequest` message.
        ///   - serializer: A serializer for `Idb_LogRequest` messages.
        ///   - deserializer: A deserializer for `Idb_LogResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func log<Result>(
            request: GRPCCore.ClientRequest<Idb_LogRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_LogRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_LogResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LogResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "xctrace_record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_XctraceRecordRequest` messages.
        ///   - serializer: A serializer for `Idb_XctraceRecordRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctraceRecordResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func xctrace_record<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_XctraceRecordRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctraceRecordRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctraceRecordResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctraceRecordResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "accessibility_info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Interaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_AccessibilityInfoRequest` message.
        ///   - serializer: A serializer for `Idb_AccessibilityInfoRequest` messages.
        ///   - deserializer: A deserializer for `Idb_AccessibilityInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func accessibility_info<Result>(
            request: GRPCCore.ClientRequest<Idb_AccessibilityInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_AccessibilityInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_AccessibilityInfoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AccessibilityInfoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "focus" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_FocusRequest` message.
        ///   - serializer: A serializer for `Idb_FocusRequest` messages.
        ///   - deserializer: A deserializer for `Idb_FocusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func focus<Result>(
            request: GRPCCore.ClientRequest<Idb_FocusRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_FocusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_FocusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_FocusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "hid" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_HIDEvent` messages.
        ///   - serializer: A serializer for `Idb_HIDEvent` messages.
        ///   - deserializer: A deserializer for `Idb_HIDResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func hid<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_HIDEvent>,
            serializer: some GRPCCore.MessageSerializer<Idb_HIDEvent>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_HIDResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_HIDResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "open_url" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_OpenUrlRequest` message.
        ///   - serializer: A serializer for `Idb_OpenUrlRequest` messages.
        ///   - deserializer: A deserializer for `Idb_OpenUrlRequest` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func open_url<Result>(
            request: GRPCCore.ClientRequest<Idb_OpenUrlRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_OpenUrlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_OpenUrlRequest>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_OpenUrlRequest>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "set_location" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SetLocationRequest` message.
        ///   - serializer: A serializer for `Idb_SetLocationRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SetLocationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func set_location<Result>(
            request: GRPCCore.ClientRequest<Idb_SetLocationRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SetLocationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SetLocationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SetLocationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "send_notification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SendNotificationRequest` message.
        ///   - serializer: A serializer for `Idb_SendNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SendNotificationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func send_notification<Result>(
            request: GRPCCore.ClientRequest<Idb_SendNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SendNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SendNotificationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SendNotificationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "simulate_memory_warning" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SimulateMemoryWarningRequest` message.
        ///   - serializer: A serializer for `Idb_SimulateMemoryWarningRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SimulateMemoryWarningResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func simulate_memory_warning<Result>(
            request: GRPCCore.ClientRequest<Idb_SimulateMemoryWarningRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SimulateMemoryWarningRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SimulateMemoryWarningResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SimulateMemoryWarningResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "approve" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Settings
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ApproveRequest` message.
        ///   - serializer: A serializer for `Idb_ApproveRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ApproveResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func approve<Result>(
            request: GRPCCore.ClientRequest<Idb_ApproveRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ApproveRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ApproveResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ApproveResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "revoke" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_RevokeRequest` message.
        ///   - serializer: A serializer for `Idb_RevokeRequest` messages.
        ///   - deserializer: A deserializer for `Idb_RevokeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func revoke<Result>(
            request: GRPCCore.ClientRequest<Idb_RevokeRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_RevokeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_RevokeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RevokeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "clear_keychain" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ClearKeychainRequest` message.
        ///   - serializer: A serializer for `Idb_ClearKeychainRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ClearKeychainResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func clear_keychain<Result>(
            request: GRPCCore.ClientRequest<Idb_ClearKeychainRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ClearKeychainRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ClearKeychainResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ClearKeychainResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "contacts_update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ContactsUpdateRequest` message.
        ///   - serializer: A serializer for `Idb_ContactsUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ContactsUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func contacts_update<Result>(
            request: GRPCCore.ClientRequest<Idb_ContactsUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ContactsUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ContactsUpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ContactsUpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "setting" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SettingRequest` message.
        ///   - serializer: A serializer for `Idb_SettingRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SettingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setting<Result>(
            request: GRPCCore.ClientRequest<Idb_SettingRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SettingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SettingResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SettingResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "get_setting" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_GetSettingRequest` message.
        ///   - serializer: A serializer for `Idb_GetSettingRequest` messages.
        ///   - deserializer: A deserializer for `Idb_GetSettingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func get_setting<Result>(
            request: GRPCCore.ClientRequest<Idb_GetSettingRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_GetSettingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_GetSettingResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_GetSettingResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "list_settings" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ListSettingRequest` message.
        ///   - serializer: A serializer for `Idb_ListSettingRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ListSettingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list_settings<Result>(
            request: GRPCCore.ClientRequest<Idb_ListSettingRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ListSettingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ListSettingResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListSettingResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "launch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > App
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_LaunchRequest` messages.
        ///   - serializer: A serializer for `Idb_LaunchRequest` messages.
        ///   - deserializer: A deserializer for `Idb_LaunchResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func launch<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_LaunchRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_LaunchRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_LaunchResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LaunchResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "list_apps" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ListAppsRequest` message.
        ///   - serializer: A serializer for `Idb_ListAppsRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ListAppsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list_apps<Result>(
            request: GRPCCore.ClientRequest<Idb_ListAppsRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ListAppsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ListAppsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListAppsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "terminate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_TerminateRequest` message.
        ///   - serializer: A serializer for `Idb_TerminateRequest` messages.
        ///   - deserializer: A deserializer for `Idb_TerminateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func terminate<Result>(
            request: GRPCCore.ClientRequest<Idb_TerminateRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_TerminateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_TerminateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TerminateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "uninstall" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_UninstallRequest` message.
        ///   - serializer: A serializer for `Idb_UninstallRequest` messages.
        ///   - deserializer: A deserializer for `Idb_UninstallResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func uninstall<Result>(
            request: GRPCCore.ClientRequest<Idb_UninstallRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_UninstallRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_UninstallResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_UninstallResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "add_media" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Video/Audio
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_AddMediaRequest` messages.
        ///   - serializer: A serializer for `Idb_AddMediaRequest` messages.
        ///   - deserializer: A deserializer for `Idb_AddMediaResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func add_media<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_AddMediaRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_AddMediaRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_AddMediaResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AddMediaResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_RecordRequest` messages.
        ///   - serializer: A serializer for `Idb_RecordRequest` messages.
        ///   - deserializer: A deserializer for `Idb_RecordResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func record<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_RecordRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_RecordRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_RecordResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_RecordResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "screenshot" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ScreenshotRequest` message.
        ///   - serializer: A serializer for `Idb_ScreenshotRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ScreenshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func screenshot<Result>(
            request: GRPCCore.ClientRequest<Idb_ScreenshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ScreenshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ScreenshotResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ScreenshotResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "video_stream" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_VideoStreamRequest` messages.
        ///   - serializer: A serializer for `Idb_VideoStreamRequest` messages.
        ///   - deserializer: A deserializer for `Idb_VideoStreamResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func video_stream<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_VideoStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_VideoStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_VideoStreamResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_VideoStreamResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "crash_delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Crash Operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashLogQuery` message.
        ///   - serializer: A serializer for `Idb_CrashLogQuery` messages.
        ///   - deserializer: A deserializer for `Idb_CrashLogResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func crash_delete<Result>(
            request: GRPCCore.ClientRequest<Idb_CrashLogQuery>,
            serializer: some GRPCCore.MessageSerializer<Idb_CrashLogQuery>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_CrashLogResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "crash_list" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashLogQuery` message.
        ///   - serializer: A serializer for `Idb_CrashLogQuery` messages.
        ///   - deserializer: A deserializer for `Idb_CrashLogResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func crash_list<Result>(
            request: GRPCCore.ClientRequest<Idb_CrashLogQuery>,
            serializer: some GRPCCore.MessageSerializer<Idb_CrashLogQuery>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_CrashLogResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "crash_show" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashShowRequest` message.
        ///   - serializer: A serializer for `Idb_CrashShowRequest` messages.
        ///   - deserializer: A deserializer for `Idb_CrashShowResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func crash_show<Result>(
            request: GRPCCore.ClientRequest<Idb_CrashShowRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_CrashShowRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_CrashShowResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashShowResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "xctest_list_bundles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > xctest operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestListBundlesRequest` message.
        ///   - serializer: A serializer for `Idb_XctestListBundlesRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctestListBundlesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func xctest_list_bundles<Result>(
            request: GRPCCore.ClientRequest<Idb_XctestListBundlesRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctestListBundlesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctestListBundlesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListBundlesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "xctest_list_tests" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestListTestsRequest` message.
        ///   - serializer: A serializer for `Idb_XctestListTestsRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctestListTestsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func xctest_list_tests<Result>(
            request: GRPCCore.ClientRequest<Idb_XctestListTestsRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctestListTestsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctestListTestsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListTestsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "xctest_run" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestRunRequest` message.
        ///   - serializer: A serializer for `Idb_XctestRunRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctestRunResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func xctest_run<Result>(
            request: GRPCCore.ClientRequest<Idb_XctestRunRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctestRunRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctestRunResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctestRunResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ls" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > File Operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_LsRequest` message.
        ///   - serializer: A serializer for `Idb_LsRequest` messages.
        ///   - deserializer: A deserializer for `Idb_LsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func ls<Result>(
            request: GRPCCore.ClientRequest<Idb_LsRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_LsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_LsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_LsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "mkdir" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_MkdirRequest` message.
        ///   - serializer: A serializer for `Idb_MkdirRequest` messages.
        ///   - deserializer: A deserializer for `Idb_MkdirResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func mkdir<Result>(
            request: GRPCCore.ClientRequest<Idb_MkdirRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_MkdirRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_MkdirResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MkdirResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "mv" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_MvRequest` message.
        ///   - serializer: A serializer for `Idb_MvRequest` messages.
        ///   - deserializer: A deserializer for `Idb_MvResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func mv<Result>(
            request: GRPCCore.ClientRequest<Idb_MvRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_MvRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_MvResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MvResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "rm" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_RmRequest` message.
        ///   - serializer: A serializer for `Idb_RmRequest` messages.
        ///   - deserializer: A deserializer for `Idb_RmResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func rm<Result>(
            request: GRPCCore.ClientRequest<Idb_RmRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_RmRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_RmResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RmResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "pull" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_PullRequest` message.
        ///   - serializer: A serializer for `Idb_PullRequest` messages.
        ///   - deserializer: A deserializer for `Idb_PullResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pull<Result>(
            request: GRPCCore.ClientRequest<Idb_PullRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_PullRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_PullResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_PullResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "push" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_PushRequest` messages.
        ///   - serializer: A serializer for `Idb_PushRequest` messages.
        ///   - deserializer: A deserializer for `Idb_PushResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func push<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_PushRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_PushRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_PushResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_PushResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "tail" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_TailRequest` messages.
        ///   - serializer: A serializer for `Idb_TailRequest` messages.
        ///   - deserializer: A deserializer for `Idb_TailResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func tail<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_TailRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_TailRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_TailResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_TailResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "idb.CompanionService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The idb companion service definition.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "connect" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Management
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ConnectRequest` message.
        ///   - serializer: A serializer for `Idb_ConnectRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ConnectResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func connect<Result>(
            request: GRPCCore.ClientRequest<Idb_ConnectRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ConnectRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ConnectResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ConnectResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.connect.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "debugserver" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_DebugServerRequest` messages.
        ///   - serializer: A serializer for `Idb_DebugServerRequest` messages.
        ///   - deserializer: A deserializer for `Idb_DebugServerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func debugserver<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_DebugServerRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_DebugServerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_DebugServerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DebugServerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.debugserver.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "dap" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_DapRequest` messages.
        ///   - serializer: A serializer for `Idb_DapRequest` messages.
        ///   - deserializer: A deserializer for `Idb_DapResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func dap<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_DapRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_DapRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_DapResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DapResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.dap.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "describe" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_TargetDescriptionRequest` message.
        ///   - serializer: A serializer for `Idb_TargetDescriptionRequest` messages.
        ///   - deserializer: A deserializer for `Idb_TargetDescriptionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func describe<Result>(
            request: GRPCCore.ClientRequest<Idb_TargetDescriptionRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_TargetDescriptionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_TargetDescriptionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TargetDescriptionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.describe.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "install" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_InstallRequest` messages.
        ///   - serializer: A serializer for `Idb_InstallRequest` messages.
        ///   - deserializer: A deserializer for `Idb_InstallResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func install<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_InstallRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_InstallRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_InstallResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstallResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.install.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "instruments_run" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_InstrumentsRunRequest` messages.
        ///   - serializer: A serializer for `Idb_InstrumentsRunRequest` messages.
        ///   - deserializer: A deserializer for `Idb_InstrumentsRunResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func instruments_run<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_InstrumentsRunRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_InstrumentsRunRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_InstrumentsRunResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstrumentsRunResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.instruments_run.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "log" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_LogRequest` message.
        ///   - serializer: A serializer for `Idb_LogRequest` messages.
        ///   - deserializer: A deserializer for `Idb_LogResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func log<Result>(
            request: GRPCCore.ClientRequest<Idb_LogRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_LogRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_LogResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LogResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.log.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "xctrace_record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_XctraceRecordRequest` messages.
        ///   - serializer: A serializer for `Idb_XctraceRecordRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctraceRecordResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func xctrace_record<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_XctraceRecordRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctraceRecordRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctraceRecordResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctraceRecordResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.xctrace_record.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "accessibility_info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Interaction
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_AccessibilityInfoRequest` message.
        ///   - serializer: A serializer for `Idb_AccessibilityInfoRequest` messages.
        ///   - deserializer: A deserializer for `Idb_AccessibilityInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func accessibility_info<Result>(
            request: GRPCCore.ClientRequest<Idb_AccessibilityInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_AccessibilityInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_AccessibilityInfoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AccessibilityInfoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.accessibility_info.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "focus" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_FocusRequest` message.
        ///   - serializer: A serializer for `Idb_FocusRequest` messages.
        ///   - deserializer: A deserializer for `Idb_FocusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func focus<Result>(
            request: GRPCCore.ClientRequest<Idb_FocusRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_FocusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_FocusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_FocusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.focus.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "hid" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_HIDEvent` messages.
        ///   - serializer: A serializer for `Idb_HIDEvent` messages.
        ///   - deserializer: A deserializer for `Idb_HIDResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func hid<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_HIDEvent>,
            serializer: some GRPCCore.MessageSerializer<Idb_HIDEvent>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_HIDResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_HIDResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.clientStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.hid.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "open_url" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_OpenUrlRequest` message.
        ///   - serializer: A serializer for `Idb_OpenUrlRequest` messages.
        ///   - deserializer: A deserializer for `Idb_OpenUrlRequest` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func open_url<Result>(
            request: GRPCCore.ClientRequest<Idb_OpenUrlRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_OpenUrlRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_OpenUrlRequest>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_OpenUrlRequest>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.open_url.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "set_location" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SetLocationRequest` message.
        ///   - serializer: A serializer for `Idb_SetLocationRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SetLocationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func set_location<Result>(
            request: GRPCCore.ClientRequest<Idb_SetLocationRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SetLocationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SetLocationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SetLocationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.set_location.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "send_notification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SendNotificationRequest` message.
        ///   - serializer: A serializer for `Idb_SendNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SendNotificationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func send_notification<Result>(
            request: GRPCCore.ClientRequest<Idb_SendNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SendNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SendNotificationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SendNotificationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.send_notification.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "simulate_memory_warning" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SimulateMemoryWarningRequest` message.
        ///   - serializer: A serializer for `Idb_SimulateMemoryWarningRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SimulateMemoryWarningResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func simulate_memory_warning<Result>(
            request: GRPCCore.ClientRequest<Idb_SimulateMemoryWarningRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SimulateMemoryWarningRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SimulateMemoryWarningResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SimulateMemoryWarningResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.simulate_memory_warning.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "approve" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Settings
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ApproveRequest` message.
        ///   - serializer: A serializer for `Idb_ApproveRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ApproveResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func approve<Result>(
            request: GRPCCore.ClientRequest<Idb_ApproveRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ApproveRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ApproveResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ApproveResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.approve.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "revoke" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_RevokeRequest` message.
        ///   - serializer: A serializer for `Idb_RevokeRequest` messages.
        ///   - deserializer: A deserializer for `Idb_RevokeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func revoke<Result>(
            request: GRPCCore.ClientRequest<Idb_RevokeRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_RevokeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_RevokeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RevokeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.revoke.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "clear_keychain" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ClearKeychainRequest` message.
        ///   - serializer: A serializer for `Idb_ClearKeychainRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ClearKeychainResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func clear_keychain<Result>(
            request: GRPCCore.ClientRequest<Idb_ClearKeychainRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ClearKeychainRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ClearKeychainResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ClearKeychainResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.clear_keychain.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "contacts_update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ContactsUpdateRequest` message.
        ///   - serializer: A serializer for `Idb_ContactsUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ContactsUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func contacts_update<Result>(
            request: GRPCCore.ClientRequest<Idb_ContactsUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ContactsUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ContactsUpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ContactsUpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.contacts_update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "setting" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_SettingRequest` message.
        ///   - serializer: A serializer for `Idb_SettingRequest` messages.
        ///   - deserializer: A deserializer for `Idb_SettingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func setting<Result>(
            request: GRPCCore.ClientRequest<Idb_SettingRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_SettingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_SettingResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SettingResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.setting.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "get_setting" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_GetSettingRequest` message.
        ///   - serializer: A serializer for `Idb_GetSettingRequest` messages.
        ///   - deserializer: A deserializer for `Idb_GetSettingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func get_setting<Result>(
            request: GRPCCore.ClientRequest<Idb_GetSettingRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_GetSettingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_GetSettingResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_GetSettingResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.get_setting.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "list_settings" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ListSettingRequest` message.
        ///   - serializer: A serializer for `Idb_ListSettingRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ListSettingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func list_settings<Result>(
            request: GRPCCore.ClientRequest<Idb_ListSettingRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ListSettingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ListSettingResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListSettingResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.list_settings.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "launch" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > App
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_LaunchRequest` messages.
        ///   - serializer: A serializer for `Idb_LaunchRequest` messages.
        ///   - deserializer: A deserializer for `Idb_LaunchResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func launch<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_LaunchRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_LaunchRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_LaunchResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LaunchResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.launch.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "list_apps" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ListAppsRequest` message.
        ///   - serializer: A serializer for `Idb_ListAppsRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ListAppsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func list_apps<Result>(
            request: GRPCCore.ClientRequest<Idb_ListAppsRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ListAppsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ListAppsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListAppsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.list_apps.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "terminate" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_TerminateRequest` message.
        ///   - serializer: A serializer for `Idb_TerminateRequest` messages.
        ///   - deserializer: A deserializer for `Idb_TerminateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func terminate<Result>(
            request: GRPCCore.ClientRequest<Idb_TerminateRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_TerminateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_TerminateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TerminateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.terminate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "uninstall" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_UninstallRequest` message.
        ///   - serializer: A serializer for `Idb_UninstallRequest` messages.
        ///   - deserializer: A deserializer for `Idb_UninstallResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func uninstall<Result>(
            request: GRPCCore.ClientRequest<Idb_UninstallRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_UninstallRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_UninstallResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_UninstallResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.uninstall.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "add_media" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Video/Audio
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_AddMediaRequest` messages.
        ///   - serializer: A serializer for `Idb_AddMediaRequest` messages.
        ///   - deserializer: A deserializer for `Idb_AddMediaResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func add_media<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_AddMediaRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_AddMediaRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_AddMediaResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AddMediaResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.clientStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.add_media.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "record" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_RecordRequest` messages.
        ///   - serializer: A serializer for `Idb_RecordRequest` messages.
        ///   - deserializer: A deserializer for `Idb_RecordResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func record<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_RecordRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_RecordRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_RecordResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_RecordResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.record.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "screenshot" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_ScreenshotRequest` message.
        ///   - serializer: A serializer for `Idb_ScreenshotRequest` messages.
        ///   - deserializer: A deserializer for `Idb_ScreenshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func screenshot<Result>(
            request: GRPCCore.ClientRequest<Idb_ScreenshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_ScreenshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_ScreenshotResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ScreenshotResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.screenshot.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "video_stream" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_VideoStreamRequest` messages.
        ///   - serializer: A serializer for `Idb_VideoStreamRequest` messages.
        ///   - deserializer: A deserializer for `Idb_VideoStreamResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func video_stream<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_VideoStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_VideoStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_VideoStreamResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_VideoStreamResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.video_stream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "crash_delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Crash Operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashLogQuery` message.
        ///   - serializer: A serializer for `Idb_CrashLogQuery` messages.
        ///   - deserializer: A deserializer for `Idb_CrashLogResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func crash_delete<Result>(
            request: GRPCCore.ClientRequest<Idb_CrashLogQuery>,
            serializer: some GRPCCore.MessageSerializer<Idb_CrashLogQuery>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_CrashLogResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.crash_delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "crash_list" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashLogQuery` message.
        ///   - serializer: A serializer for `Idb_CrashLogQuery` messages.
        ///   - deserializer: A deserializer for `Idb_CrashLogResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func crash_list<Result>(
            request: GRPCCore.ClientRequest<Idb_CrashLogQuery>,
            serializer: some GRPCCore.MessageSerializer<Idb_CrashLogQuery>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_CrashLogResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.crash_list.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "crash_show" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_CrashShowRequest` message.
        ///   - serializer: A serializer for `Idb_CrashShowRequest` messages.
        ///   - deserializer: A deserializer for `Idb_CrashShowResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func crash_show<Result>(
            request: GRPCCore.ClientRequest<Idb_CrashShowRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_CrashShowRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_CrashShowResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashShowResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.crash_show.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "xctest_list_bundles" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > xctest operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestListBundlesRequest` message.
        ///   - serializer: A serializer for `Idb_XctestListBundlesRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctestListBundlesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func xctest_list_bundles<Result>(
            request: GRPCCore.ClientRequest<Idb_XctestListBundlesRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctestListBundlesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctestListBundlesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListBundlesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.xctest_list_bundles.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "xctest_list_tests" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestListTestsRequest` message.
        ///   - serializer: A serializer for `Idb_XctestListTestsRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctestListTestsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func xctest_list_tests<Result>(
            request: GRPCCore.ClientRequest<Idb_XctestListTestsRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctestListTestsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctestListTestsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListTestsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.xctest_list_tests.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "xctest_run" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_XctestRunRequest` message.
        ///   - serializer: A serializer for `Idb_XctestRunRequest` messages.
        ///   - deserializer: A deserializer for `Idb_XctestRunResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func xctest_run<Result>(
            request: GRPCCore.ClientRequest<Idb_XctestRunRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_XctestRunRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_XctestRunResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctestRunResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.xctest_run.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ls" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > File Operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_LsRequest` message.
        ///   - serializer: A serializer for `Idb_LsRequest` messages.
        ///   - deserializer: A deserializer for `Idb_LsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func ls<Result>(
            request: GRPCCore.ClientRequest<Idb_LsRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_LsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_LsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_LsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.ls.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "mkdir" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_MkdirRequest` message.
        ///   - serializer: A serializer for `Idb_MkdirRequest` messages.
        ///   - deserializer: A deserializer for `Idb_MkdirResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func mkdir<Result>(
            request: GRPCCore.ClientRequest<Idb_MkdirRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_MkdirRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_MkdirResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MkdirResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.mkdir.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "mv" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_MvRequest` message.
        ///   - serializer: A serializer for `Idb_MvRequest` messages.
        ///   - deserializer: A deserializer for `Idb_MvResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func mv<Result>(
            request: GRPCCore.ClientRequest<Idb_MvRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_MvRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_MvResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MvResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.mv.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "rm" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_RmRequest` message.
        ///   - serializer: A serializer for `Idb_RmRequest` messages.
        ///   - deserializer: A deserializer for `Idb_RmResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func rm<Result>(
            request: GRPCCore.ClientRequest<Idb_RmRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_RmRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_RmResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RmResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Idb_CompanionService.Method.rm.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "pull" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Idb_PullRequest` message.
        ///   - serializer: A serializer for `Idb_PullRequest` messages.
        ///   - deserializer: A deserializer for `Idb_PullResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func pull<Result>(
            request: GRPCCore.ClientRequest<Idb_PullRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_PullRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_PullResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_PullResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.pull.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "push" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_PushRequest` messages.
        ///   - serializer: A serializer for `Idb_PushRequest` messages.
        ///   - deserializer: A deserializer for `Idb_PushResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func push<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_PushRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_PushRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_PushResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_PushResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.clientStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.push.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "tail" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Idb_TailRequest` messages.
        ///   - serializer: A serializer for `Idb_TailRequest` messages.
        ///   - deserializer: A deserializer for `Idb_TailResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func tail<Result>(
            request: GRPCCore.StreamingClientRequest<Idb_TailRequest>,
            serializer: some GRPCCore.MessageSerializer<Idb_TailRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Idb_TailResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_TailResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Idb_CompanionService.Method.tail.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService.ClientProtocol {
    /// Call the "connect" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Management
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ConnectRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func connect<Result>(
        request: GRPCCore.ClientRequest<Idb_ConnectRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ConnectResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.connect(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ConnectRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ConnectResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "debugserver" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_DebugServerRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func debugserver<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_DebugServerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DebugServerResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.debugserver(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_DebugServerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_DebugServerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "dap" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_DapRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func dap<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_DapRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DapResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.dap(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_DapRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_DapResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "describe" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_TargetDescriptionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func describe<Result>(
        request: GRPCCore.ClientRequest<Idb_TargetDescriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TargetDescriptionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describe(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_TargetDescriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_TargetDescriptionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "install" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_InstallRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func install<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_InstallRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstallResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.install(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_InstallRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_InstallResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "instruments_run" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_InstrumentsRunRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func instruments_run<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_InstrumentsRunRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstrumentsRunResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.instruments_run(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_InstrumentsRunRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_InstrumentsRunResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "log" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_LogRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func log<Result>(
        request: GRPCCore.ClientRequest<Idb_LogRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LogResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.log(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_LogRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_LogResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctrace_record" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_XctraceRecordRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctrace_record<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_XctraceRecordRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctraceRecordResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.xctrace_record(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctraceRecordRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctraceRecordResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "accessibility_info" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Interaction
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_AccessibilityInfoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func accessibility_info<Result>(
        request: GRPCCore.ClientRequest<Idb_AccessibilityInfoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AccessibilityInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.accessibility_info(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_AccessibilityInfoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_AccessibilityInfoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "focus" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_FocusRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func focus<Result>(
        request: GRPCCore.ClientRequest<Idb_FocusRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_FocusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.focus(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_FocusRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_FocusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "hid" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_HIDEvent` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func hid<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_HIDEvent>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_HIDResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.hid(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_HIDEvent>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_HIDResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "open_url" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_OpenUrlRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func open_url<Result>(
        request: GRPCCore.ClientRequest<Idb_OpenUrlRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_OpenUrlRequest>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.open_url(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_OpenUrlRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_OpenUrlRequest>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "set_location" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_SetLocationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func set_location<Result>(
        request: GRPCCore.ClientRequest<Idb_SetLocationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SetLocationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.set_location(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SetLocationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SetLocationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "send_notification" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_SendNotificationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func send_notification<Result>(
        request: GRPCCore.ClientRequest<Idb_SendNotificationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SendNotificationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.send_notification(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SendNotificationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SendNotificationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "simulate_memory_warning" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_SimulateMemoryWarningRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func simulate_memory_warning<Result>(
        request: GRPCCore.ClientRequest<Idb_SimulateMemoryWarningRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SimulateMemoryWarningResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.simulate_memory_warning(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SimulateMemoryWarningRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SimulateMemoryWarningResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "approve" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Settings
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ApproveRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func approve<Result>(
        request: GRPCCore.ClientRequest<Idb_ApproveRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ApproveResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.approve(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ApproveRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ApproveResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "revoke" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_RevokeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func revoke<Result>(
        request: GRPCCore.ClientRequest<Idb_RevokeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RevokeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.revoke(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_RevokeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_RevokeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "clear_keychain" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ClearKeychainRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func clear_keychain<Result>(
        request: GRPCCore.ClientRequest<Idb_ClearKeychainRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ClearKeychainResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.clear_keychain(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ClearKeychainRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ClearKeychainResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "contacts_update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ContactsUpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func contacts_update<Result>(
        request: GRPCCore.ClientRequest<Idb_ContactsUpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ContactsUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.contacts_update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ContactsUpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ContactsUpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "setting" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_SettingRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func setting<Result>(
        request: GRPCCore.ClientRequest<Idb_SettingRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SettingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setting(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_SettingRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_SettingResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "get_setting" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_GetSettingRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func get_setting<Result>(
        request: GRPCCore.ClientRequest<Idb_GetSettingRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_GetSettingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.get_setting(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_GetSettingRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_GetSettingResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "list_settings" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ListSettingRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func list_settings<Result>(
        request: GRPCCore.ClientRequest<Idb_ListSettingRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListSettingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list_settings(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ListSettingRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ListSettingResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "launch" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > App
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_LaunchRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func launch<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_LaunchRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LaunchResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.launch(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_LaunchRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_LaunchResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "list_apps" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ListAppsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func list_apps<Result>(
        request: GRPCCore.ClientRequest<Idb_ListAppsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListAppsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list_apps(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ListAppsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ListAppsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "terminate" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_TerminateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func terminate<Result>(
        request: GRPCCore.ClientRequest<Idb_TerminateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TerminateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.terminate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_TerminateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_TerminateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "uninstall" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_UninstallRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func uninstall<Result>(
        request: GRPCCore.ClientRequest<Idb_UninstallRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_UninstallResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.uninstall(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_UninstallRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_UninstallResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "add_media" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Video/Audio
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_AddMediaRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func add_media<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_AddMediaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AddMediaResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.add_media(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_AddMediaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_AddMediaResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "record" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_RecordRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func record<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_RecordRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_RecordResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.record(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_RecordRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_RecordResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "screenshot" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_ScreenshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func screenshot<Result>(
        request: GRPCCore.ClientRequest<Idb_ScreenshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ScreenshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.screenshot(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_ScreenshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_ScreenshotResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "video_stream" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_VideoStreamRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func video_stream<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_VideoStreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_VideoStreamResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.video_stream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_VideoStreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_VideoStreamResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "crash_delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Crash Operations
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_CrashLogQuery` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func crash_delete<Result>(
        request: GRPCCore.ClientRequest<Idb_CrashLogQuery>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.crash_delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_CrashLogQuery>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_CrashLogResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "crash_list" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_CrashLogQuery` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func crash_list<Result>(
        request: GRPCCore.ClientRequest<Idb_CrashLogQuery>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.crash_list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_CrashLogQuery>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_CrashLogResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "crash_show" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_CrashShowRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func crash_show<Result>(
        request: GRPCCore.ClientRequest<Idb_CrashShowRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashShowResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.crash_show(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_CrashShowRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_CrashShowResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctest_list_bundles" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > xctest operations
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_XctestListBundlesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctest_list_bundles<Result>(
        request: GRPCCore.ClientRequest<Idb_XctestListBundlesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListBundlesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.xctest_list_bundles(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctestListBundlesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctestListBundlesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctest_list_tests" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_XctestListTestsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctest_list_tests<Result>(
        request: GRPCCore.ClientRequest<Idb_XctestListTestsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListTestsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.xctest_list_tests(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctestListTestsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctestListTestsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctest_run" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_XctestRunRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctest_run<Result>(
        request: GRPCCore.ClientRequest<Idb_XctestRunRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctestRunResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.xctest_run(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_XctestRunRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_XctestRunResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ls" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > File Operations
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_LsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func ls<Result>(
        request: GRPCCore.ClientRequest<Idb_LsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_LsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.ls(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_LsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_LsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "mkdir" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_MkdirRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func mkdir<Result>(
        request: GRPCCore.ClientRequest<Idb_MkdirRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MkdirResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.mkdir(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_MkdirRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_MkdirResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "mv" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_MvRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func mv<Result>(
        request: GRPCCore.ClientRequest<Idb_MvRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MvResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.mv(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_MvRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_MvResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "rm" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_RmRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func rm<Result>(
        request: GRPCCore.ClientRequest<Idb_RmRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RmResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.rm(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_RmRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_RmResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "pull" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Idb_PullRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func pull<Result>(
        request: GRPCCore.ClientRequest<Idb_PullRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_PullResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.pull(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_PullRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_PullResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "push" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_PushRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func push<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_PushRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_PushResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.push(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_PushRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_PushResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "tail" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Idb_TailRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func tail<Result>(
        request: GRPCCore.StreamingClientRequest<Idb_TailRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_TailResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.tail(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Idb_TailRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Idb_TailResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Idb_CompanionService.ClientProtocol {
    /// Call the "connect" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Management
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func connect<Result>(
        _ message: Idb_ConnectRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ConnectResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ConnectRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.connect(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "debugserver" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func debugserver<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_DebugServerRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DebugServerResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_DebugServerRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.debugserver(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "dap" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func dap<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_DapRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_DapResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_DapRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.dap(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "describe" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func describe<Result>(
        _ message: Idb_TargetDescriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TargetDescriptionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_TargetDescriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describe(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "install" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func install<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_InstallRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstallResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_InstallRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.install(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "instruments_run" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func instruments_run<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_InstrumentsRunRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_InstrumentsRunResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_InstrumentsRunRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.instruments_run(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "log" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func log<Result>(
        _ message: Idb_LogRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LogResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_LogRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.log(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctrace_record" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctrace_record<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_XctraceRecordRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctraceRecordResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_XctraceRecordRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.xctrace_record(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "accessibility_info" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Interaction
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func accessibility_info<Result>(
        _ message: Idb_AccessibilityInfoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AccessibilityInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_AccessibilityInfoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.accessibility_info(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "focus" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func focus<Result>(
        _ message: Idb_FocusRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_FocusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_FocusRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.focus(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "hid" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func hid<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_HIDEvent>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_HIDResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_HIDEvent>(
            metadata: metadata,
            producer: producer
        )
        return try await self.hid(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "open_url" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func open_url<Result>(
        _ message: Idb_OpenUrlRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_OpenUrlRequest>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_OpenUrlRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.open_url(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "set_location" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func set_location<Result>(
        _ message: Idb_SetLocationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SetLocationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_SetLocationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.set_location(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "send_notification" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func send_notification<Result>(
        _ message: Idb_SendNotificationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SendNotificationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_SendNotificationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.send_notification(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "simulate_memory_warning" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func simulate_memory_warning<Result>(
        _ message: Idb_SimulateMemoryWarningRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SimulateMemoryWarningResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_SimulateMemoryWarningRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.simulate_memory_warning(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "approve" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Settings
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func approve<Result>(
        _ message: Idb_ApproveRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ApproveResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ApproveRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.approve(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "revoke" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func revoke<Result>(
        _ message: Idb_RevokeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RevokeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_RevokeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.revoke(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "clear_keychain" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func clear_keychain<Result>(
        _ message: Idb_ClearKeychainRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ClearKeychainResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ClearKeychainRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.clear_keychain(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "contacts_update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func contacts_update<Result>(
        _ message: Idb_ContactsUpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ContactsUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ContactsUpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.contacts_update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "setting" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func setting<Result>(
        _ message: Idb_SettingRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_SettingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_SettingRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setting(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "get_setting" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func get_setting<Result>(
        _ message: Idb_GetSettingRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_GetSettingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_GetSettingRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.get_setting(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "list_settings" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func list_settings<Result>(
        _ message: Idb_ListSettingRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListSettingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ListSettingRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list_settings(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "launch" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > App
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func launch<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_LaunchRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_LaunchResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_LaunchRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.launch(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "list_apps" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func list_apps<Result>(
        _ message: Idb_ListAppsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ListAppsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ListAppsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list_apps(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "terminate" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func terminate<Result>(
        _ message: Idb_TerminateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_TerminateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_TerminateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.terminate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "uninstall" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func uninstall<Result>(
        _ message: Idb_UninstallRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_UninstallResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_UninstallRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.uninstall(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "add_media" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Video/Audio
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func add_media<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_AddMediaRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_AddMediaResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_AddMediaRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.add_media(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "record" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func record<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_RecordRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_RecordResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_RecordRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.record(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "screenshot" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func screenshot<Result>(
        _ message: Idb_ScreenshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_ScreenshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_ScreenshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.screenshot(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "video_stream" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func video_stream<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_VideoStreamRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_VideoStreamResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_VideoStreamRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.video_stream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "crash_delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Crash Operations
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func crash_delete<Result>(
        _ message: Idb_CrashLogQuery,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_CrashLogQuery>(
            message: message,
            metadata: metadata
        )
        return try await self.crash_delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "crash_list" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func crash_list<Result>(
        _ message: Idb_CrashLogQuery,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashLogResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_CrashLogQuery>(
            message: message,
            metadata: metadata
        )
        return try await self.crash_list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "crash_show" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func crash_show<Result>(
        _ message: Idb_CrashShowRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_CrashShowResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_CrashShowRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.crash_show(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctest_list_bundles" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > xctest operations
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctest_list_bundles<Result>(
        _ message: Idb_XctestListBundlesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListBundlesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_XctestListBundlesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.xctest_list_bundles(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctest_list_tests" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctest_list_tests<Result>(
        _ message: Idb_XctestListTestsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_XctestListTestsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_XctestListTestsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.xctest_list_tests(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "xctest_run" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func xctest_run<Result>(
        _ message: Idb_XctestRunRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_XctestRunResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_XctestRunRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.xctest_run(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ls" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > File Operations
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func ls<Result>(
        _ message: Idb_LsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_LsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_LsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.ls(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "mkdir" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func mkdir<Result>(
        _ message: Idb_MkdirRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MkdirResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_MkdirRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.mkdir(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "mv" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func mv<Result>(
        _ message: Idb_MvRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_MvResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_MvRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.mv(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "rm" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func rm<Result>(
        _ message: Idb_RmRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_RmResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_RmRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.rm(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "pull" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func pull<Result>(
        _ message: Idb_PullRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_PullResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Idb_PullRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pull(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "push" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func push<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_PushRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Idb_PushResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_PushRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.push(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "tail" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func tail<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Idb_TailRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Idb_TailResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Idb_TailRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.tail(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}