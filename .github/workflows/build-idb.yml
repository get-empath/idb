name: Build IDB Binaries

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-14
            arch: arm64
            runner_arch: ARM64
          - os: macos-13
            arch: x86_64
            runner_arch: X64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Display Python and system info
        run: |
          python --version
          uname -m
          echo "Building for architecture: ${{ matrix.arch }}"
      
      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
      
      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install pyinstaller pyre-extensions "setuptools>=75,<81"
      
      - name: Install IDB
        env:
          FB_IDB_VERSION: "1.1.3"
        run: |
          source venv/bin/activate
          pip install -e .
      
      - name: Create embedded entry point script
        run: |
          cat > idb_main_embedded.py << 'ENDOFFILE'
          #!/usr/bin/env python3
          """
          Standalone IDB entry point with embedded migrations code
          """
          import sys
          import os
          import warnings

          # Suppress the pkg_resources deprecation warning
          warnings.filterwarnings("ignore", category=UserWarning, module=".*pkg_resources.*")

          # Set environment variable that IDB might need
          os.environ['FB_IDB_VERSION'] = '1.1.3'

          # Embed the python.migrations.py310 module code
          # This solves the "No module named 'python.migrations'" error
          try:
              from enum import StrEnum as StrEnum310
          except ImportError:
              from enum import Enum
              class StrEnum310(str, Enum):
                  pass

          # Create the module structure that IDB expects
          import types
          python_module = types.ModuleType('python')
          migrations_module = types.ModuleType('python.migrations')
          py310_module = types.ModuleType('python.migrations.py310')

          # Add the StrEnum310 to the py310 module
          py310_module.StrEnum310 = StrEnum310

          # Add modules to sys.modules so imports work
          sys.modules['python'] = python_module
          sys.modules['python.migrations'] = migrations_module
          sys.modules['python.migrations.py310'] = py310_module

          try:
              from idb.cli.main import main
              if __name__ == '__main__':
                  sys.exit(main())
          except ImportError as e:
              print(f"Error importing IDB: {e}", file=sys.stderr)
              print("Make sure IDB is properly installed", file=sys.stderr)
              sys.exit(1)
          except Exception as e:
              print(f"Error running IDB: {e}", file=sys.stderr)
              sys.exit(1)
          ENDOFFILE
          chmod +x idb_main_embedded.py
      
      - name: Create PyInstaller spec file
        run: |
          cat > idb_standalone_embedded_onedir.spec << 'ENDOFFILE'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import sys
          from PyInstaller.utils.hooks import collect_all

          project_root = os.getcwd()
          sys.path.insert(0, project_root)

          # Collect all IDB modules
          datas, binaries, hiddenimports = collect_all('idb')

          # Add other dependencies
          grpclib_datas, grpclib_binaries, grpclib_hiddenimports = collect_all('grpclib')
          protobuf_datas, protobuf_binaries, protobuf_hiddenimports = collect_all('protobuf')
          aiofiles_datas, aiofiles_binaries, aiofiles_hiddenimports = collect_all('aiofiles')
          treelib_datas, treelib_binaries, treelib_hiddenimports = collect_all('treelib')

          try:
              pyre_datas, pyre_binaries, pyre_hiddenimports = collect_all('pyre_extensions')
          except:
              pyre_datas, pyre_binaries, pyre_hiddenimports = [], [], []

          # Combine dependencies
          datas += grpclib_datas + protobuf_datas + aiofiles_datas + treelib_datas + pyre_datas
          binaries += grpclib_binaries + protobuf_binaries + aiofiles_binaries + treelib_binaries + pyre_binaries
          hiddenimports += grpclib_hiddenimports + protobuf_hiddenimports + aiofiles_hiddenimports + treelib_hiddenimports + pyre_hiddenimports

          # Critical: Add all essential hidden imports
          hiddenimports += [
              'pyre_extensions',
              'typing_extensions',
              'grpclib',
              'grpclib.client',
              'grpclib.server',
              'grpclib.const',
              'grpclib.events',
              'google.protobuf',
              'google.protobuf.internal',
              'google.protobuf.message',
              'google.protobuf.descriptor',
              'idb.cli.main',
              'idb.cli.commands',
              'idb.common.types',
              'idb.common.format',
              'idb.common.logging',
              'idb.grpc.idb_pb2',
              'idb.grpc.idb_grpc',
              'idb.grpc.client',
              'aiofiles',
              'aiofiles.base',
              'aiofiles.threadpool',
              'treelib',
              'treelib.tree',
              'treelib.node',
              'h2',
              'h2.connection',
              'h2.events',
              'h2.config',
              'h2.settings',
              'pkg_resources',
          ]

          a = Analysis(
              ['idb_main_embedded.py'],
              pathex=[project_root],
              binaries=binaries,
              datas=datas,
              hiddenimports=hiddenimports,
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['tkinter', 'matplotlib', 'numpy', 'scipy'],
              cipher=None,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=None)

          # ONE-DIRECTORY MODE: Create separate exe and collect steps
          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='idb_embedded',
              debug=False,
              bootloader_ignore_signals=False,
              strip=True,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )

          # COLLECT: Gather all files into a directory
          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=True,
              upx=False,
              upx_exclude=[],
              name='idb_embedded',
          )
          ENDOFFILE
      
      - name: Build binary with PyInstaller
        env:
          FB_IDB_VERSION: "1.1.3"
        run: |
          source venv/bin/activate
          pyinstaller idb_standalone_embedded_onedir.spec --clean
      
      - name: Verify build output
        run: |
          echo "Build directory contents:"
          ls -lh dist/idb_embedded/
          echo ""
          echo "Binary size:"
          du -sh dist/idb_embedded/
          echo ""
          echo "Main executable:"
          ls -lh dist/idb_embedded/idb_embedded
      
      - name: Test binary - Help command
        run: |
          echo "Testing: ./dist/idb_embedded/idb_embedded --help"
          ./dist/idb_embedded/idb_embedded --help
      
      - name: Test binary - Version check
        run: |
          echo "Testing: ./dist/idb_embedded/idb_embedded --version"
          ./dist/idb_embedded/idb_embedded --version || echo "Version flag may not be supported"
      
      - name: Test binary - List targets
        run: |
          echo "Testing: ./dist/idb_embedded/idb_embedded list-targets --json"
          ./dist/idb_embedded/idb_embedded list-targets --json || echo "No targets available (expected on CI)"
      
      - name: Create wrapper script
        run: |
          cat > dist/idb_embedded/idb << 'ENDOFFILE'
          #!/bin/bash
          # Wrapper script for IDB embedded binary
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          exec "$SCRIPT_DIR/idb_embedded" "$@"
          ENDOFFILE
          chmod +x dist/idb_embedded/idb
          
          echo "Wrapper script created. Users can now run './idb' instead of './idb_embedded'"
      
      - name: Create README for binary distribution
        run: |
          cat > dist/idb_embedded/README.md << 'ENDOFFILE'
          # IDB Standalone Binary
          
          This is a self-contained IDB (iOS Debug Bridge) binary built with PyInstaller.
          
          ## Architecture
          Built for: ${{ matrix.arch }} (${{ matrix.runner_arch }})
          
          ## Usage
          
          You can run IDB using either:
          - `./idb_embedded [command]` - Direct execution
          - `./idb [command]` - Wrapper script (recommended)
          
          ## Examples
```bash
          # Show help
          ./idb --help
          
          # List connected iOS devices/simulators
          ./idb list-targets
          
          # List targets in JSON format
          ./idb list-targets --json
```
          
          ## Requirements
          
          - macOS ${{ matrix.os }} or compatible
          - No Python installation required
          - Architecture: ${{ matrix.arch }}
          
          ## Directory Structure
          
          - `idb_embedded` - Main executable (~4MB)
          - `_internal/` - Dependencies directory (~15-20MB)
          - `idb` - Convenience wrapper script
          
          ## Version
          
          IDB Version: 1.1.3
          Built on: $(date)
          
          ## Troubleshooting
          
          If you encounter permission errors, make sure the binary is executable:
```bash
          chmod +x idb_embedded idb
```
          
          ## More Information
          
          - IDB Repository: https://github.com/facebook/idb
          - Documentation: https://fbidb.io
          ENDOFFILE
      
      - name: Create distribution package
        run: |
          cd dist
          tar -czf idb-${{ matrix.arch }}-macos.tar.gz idb_embedded/
          echo "Package created: idb-${{ matrix.arch }}-macos.tar.gz"
          ls -lh idb-${{ matrix.arch }}-macos.tar.gz
      
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: idb-binary-${{ matrix.arch }}
          path: dist/idb-${{ matrix.arch }}-macos.tar.gz
          retention-days: 30
      
      - name: Upload build directory (for debugging)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: idb-build-dir-${{ matrix.arch }}
          path: dist/idb_embedded/
          retention-days: 7
  
  create-release-info:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Create release notes
        run: |
          cat > RELEASE_NOTES.md << 'ENDOFFILE'
          # IDB Standalone Binaries
          
          Self-contained IDB (iOS Debug Bridge) binaries for macOS.
          
          ## Available Builds
          
          - **ARM64** (Apple Silicon): `idb-arm64-macos.tar.gz`
          - **x86_64** (Intel): `idb-x86_64-macos.tar.gz`
          
          ## Installation
          
          1. Download the appropriate binary for your system
          2. Extract: `tar -xzf idb-[arch]-macos.tar.gz`
          3. Make executable: `chmod +x idb_embedded/idb_embedded idb_embedded/idb`
          4. Run: `./idb_embedded/idb --help`
          
          ## Features
          
          - No Python installation required
          - Self-contained with all dependencies
          - Version: IDB 1.1.3
          - Built with PyInstaller in one-directory mode for faster startup
          
          ## Testing
          
          All binaries have been tested with:
          - `--help` command
          - `list-targets --json` command
          
          ## System Requirements
          
          - macOS 13.0 or later (for x86_64)
          - macOS 14.0 or later (for ARM64)
          
          Built on: $(date)
          ENDOFFILE
          
          cat RELEASE_NOTES.md
      
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md
          retention-days: 30