name: Build IDB Companion Binaries

on:
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/build-idb-companion.yml'
      - 'idb_companion/**'
      - 'build.sh'
      - 'idb_build.sh'
  pull_request:
    branches: [ main, master ]
    paths:
      - '.github/workflows/build-idb-companion.yml'
      - 'idb_companion/**'
      - 'build.sh'
      - 'idb_build.sh'
  workflow_dispatch:

jobs:
  build-companion:
    strategy:
      matrix:
        include:
          - os: macos-14
            arch: arm64
            xcode: "15.2"
          - os: macos-13
            arch: x86_64
            xcode: "15.2"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout IDB repository
        uses: actions/checkout@v4
        with:
          repository: facebook/idb
          ref: main
      
      - name: Select Xcode version
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
          xcodebuild -version
      
      - name: Display system info
        run: |
          uname -m
          sw_vers
          xcodebuild -version
          echo "Building for architecture: ${{ matrix.arch }}"
      
      - name: Install build dependencies
        run: |
          # Install grpc and protoc (needed for building)
          brew tap grpc/grpc
          brew install grpc
          
          # Verify installations
          which protoc
          protoc --version

      - name: Fix documentation warnings in IDB source
        run: |
          echo "Patching FBArchiveOperations.h to fix documentation warnings..."
          # Remove the problematic @param documentation
          if [ -f "FBControlCore/Utility/FBArchiveOperations.h" ]; then
            sed -i.bak '/^[[:space:]]*@param queue the queue to do work on/d' \
              FBControlCore/Utility/FBArchiveOperations.h
            echo "Patch applied successfully"
          else
            echo "Warning: FBArchiveOperations.h not found, skipping patch"
          fi    
      
      - name: Build IDB Companion using idb_build.sh
        run: |
          echo "Building IDB Companion with idb_build.sh..."
          ./idb_build.sh idb_companion build "$(pwd)/companion_output"
          
          echo "Build complete. Searching for companion binary..."
          find . -name "idb_companion" -type f 2>/dev/null | grep -v ".build" | head -5
      
      - name: Locate and verify companion binary
        run: |
          # The idb_build.sh script should output to the specified directory
          # But let's search comprehensively
          echo "Searching for idb_companion binary..."
          
          COMPANION_PATH=""
          
          # Check common locations
          if [ -f "companion_output/idb_companion" ]; then
            COMPANION_PATH="companion_output/idb_companion"
          elif [ -d "build" ]; then
            COMPANION_PATH=$(find build -name "idb_companion" -type f | grep -v ".build" | head -n 1)
          fi
          
          # If still not found, search everywhere
          if [ -z "$COMPANION_PATH" ]; then
            echo "Searching entire directory..."
            COMPANION_PATH=$(find . -name "idb_companion" -type f 2>/dev/null | grep -v ".build" | grep -v ".git" | head -n 1)
          fi
          
          if [ -z "$COMPANION_PATH" ]; then
            echo "ERROR: Could not find idb_companion binary"
            echo "Directory structure:"
            ls -la
            echo ""
            echo "Searching for any companion-related files:"
            find . -name "*companion*" -type f | head -20
            exit 1
          fi
          
          echo "Found idb_companion at: $COMPANION_PATH"
          file "$COMPANION_PATH"
          lipo -info "$COMPANION_PATH"
          
          # Save for next steps
          echo "COMPANION_PATH=$COMPANION_PATH" >> $GITHUB_ENV
          echo "RELEASE_DIR=$(dirname $COMPANION_PATH)" >> $GITHUB_ENV
      
      - name: Create distribution directory
        run: |
          mkdir -p dist/idb-companion-${{ matrix.arch }}/bin
          mkdir -p dist/idb-companion-${{ matrix.arch }}/Frameworks
          
          # Copy companion binary
          cp "$COMPANION_PATH" dist/idb-companion-${{ matrix.arch }}/bin/idb_companion
          chmod +x dist/idb-companion-${{ matrix.arch }}/bin/idb_companion
          
          # Copy frameworks if they exist
          if [ -d "$RELEASE_DIR/Frameworks" ]; then
            echo "Copying frameworks..."
            cp -R "$RELEASE_DIR/Frameworks"/* dist/idb-companion-${{ matrix.arch }}/Frameworks/
          fi
          
          # Also copy frameworks from frameworks_build if they exist
          if [ -d "frameworks_build/Frameworks" ]; then
            echo "Copying additional frameworks from frameworks_build..."
            cp -R frameworks_build/Frameworks/* dist/idb-companion-${{ matrix.arch }}/Frameworks/ 2>/dev/null || true
          fi
          
          echo "Distribution directory created:"
          ls -la dist/idb-companion-${{ matrix.arch }}/
          ls -la dist/idb-companion-${{ matrix.arch }}/bin/
          ls -la dist/idb-companion-${{ matrix.arch }}/Frameworks/ 2>/dev/null || echo "No frameworks directory"
      
      - name: Create README
        run: |
          cat > dist/idb-companion-${{ matrix.arch }}/README.md << 'EOF'
          # IDB Companion Binary
          
          This is the IDB Companion daemon built for ${{ matrix.arch }} macOS.
          
          ## Architecture
          Built for: ${{ matrix.arch }}
          
          ## Usage
          
          The IDB Companion is typically launched by the IDB client automatically.
          You can also run it manually:
          
          ```bash
          ./bin/idb_companion --help
          ```
          
          ## Structure
          
          - `bin/idb_companion` - Main companion executable
          - `Frameworks/` - Required frameworks (if any)
          
          ## Version
          
          Built from: facebook/idb main branch
          Build date: $(date)
          Xcode version: ${{ matrix.xcode }}
          
          ## More Information
          
          - IDB Repository: https://github.com/facebook/idb
          - Documentation: https://fbidb.io
          EOF
      
      - name: Create tarball
        run: |
          cd dist
          tar -czf idb-companion-${{ matrix.arch }}-macos.tar.gz idb-companion-${{ matrix.arch }}/
          echo "Package created: idb-companion-${{ matrix.arch }}-macos.tar.gz"
          ls -lh idb-companion-${{ matrix.arch }}-macos.tar.gz
      
      - name: Upload companion binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: idb-companion-${{ matrix.arch }}
          path: dist/idb-companion-${{ matrix.arch }}-macos.tar.gz
          retention-days: 30
      
      - name: Upload build directory (for debugging)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: idb-companion-build-${{ matrix.arch }}
          path: dist/idb-companion-${{ matrix.arch }}/
          retention-days: 7
  
  create-universal-binary:
    needs: build-companion
    runs-on: macos-14
    
    steps:
      - name: Download ARM64 build
        uses: actions/download-artifact@v4
        with:
          name: idb-companion-build-arm64
          path: arm64-build
      
      - name: Download x86_64 build
        uses: actions/download-artifact@v4
        with:
          name: idb-companion-build-x86_64
          path: x86_64-build
      
      - name: Create universal binary
        run: |
          mkdir -p universal-build/bin
          mkdir -p universal-build/Frameworks
          
          # Create universal binary using lipo
          lipo -create \
            arm64-build/bin/idb_companion \
            x86_64-build/bin/idb_companion \
            -output universal-build/bin/idb_companion
          
          # Make it executable
          chmod +x universal-build/bin/idb_companion
          
          echo "Universal binary created successfully"
      
      - name: Verify universal binary
        run: |
          echo "Universal binary info:"
          file universal-build/bin/idb_companion
          lipo -info universal-build/bin/idb_companion
          ls -lh universal-build/bin/idb_companion
      
      - name: Copy frameworks (prefer ARM64 version)
        run: |
          if [ -d "arm64-build/Frameworks" ] && [ "$(ls -A arm64-build/Frameworks)" ]; then
            echo "Copying frameworks from ARM64 build..."
            cp -R arm64-build/Frameworks/* universal-build/Frameworks/
          elif [ -d "x86_64-build/Frameworks" ] && [ "$(ls -A x86_64-build/Frameworks)" ]; then
            echo "Copying frameworks from x86_64 build..."
            cp -R x86_64-build/Frameworks/* universal-build/Frameworks/
          else
            echo "No frameworks found in either build"
          fi
      
      - name: Create README for universal binary
        run: |
          cat > universal-build/README.md << 'EOF'
          # IDB Companion Universal Binary
          
          This is a universal IDB Companion binary that works on both Apple Silicon (ARM64) and Intel (x86_64) Macs.
          
          ## Architecture
          Universal binary supporting:
          - ARM64 (Apple Silicon)
          - x86_64 (Intel)
          
          ## Usage
          
          ```bash
          ./bin/idb_companion --help
          ```
          
          The binary will automatically run the correct architecture for your system.
          
          ## Structure
          
          - `bin/idb_companion` - Universal companion executable
          - `Frameworks/` - Required frameworks (if any)
          
          ## Version
          
          Built from: facebook/idb main branch
          Build date: $(date)
          
          ## More Information
          
          - IDB Repository: https://github.com/facebook/idb
          - Documentation: https://fbidb.io
          EOF
      
      - name: Create universal tarball
        run: |
          tar -czf idb-companion-universal-macos.tar.gz -C universal-build .
          ls -lh idb-companion-universal-macos.tar.gz
      
      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: idb-companion-universal
          path: idb-companion-universal-macos.tar.gz
          retention-days: 30
  
  create-release-info:
    needs: [build-companion, create-universal-binary]
    runs-on: ubuntu-latest
    
    steps:
      - name: Create release notes
        run: |
          cat > COMPANION_RELEASE_NOTES.md << 'EOF'
          # IDB Companion Binaries
          
          Pre-built IDB Companion daemon binaries for macOS.
          
          ## Available Builds
          
          - **Universal Binary** (Recommended): `idb-companion-universal-macos.tar.gz`
            - Works on both Apple Silicon and Intel Macs
          - **ARM64** (Apple Silicon): `idb-companion-arm64-macos.tar.gz`
          - **x86_64** (Intel): `idb-companion-x86_64-macos.tar.gz`
          
          ## Installation
          
          ### Using Universal Binary (Recommended)
          
          1. Download `idb-companion-universal-macos.tar.gz`
          2. Extract: `tar -xzf idb-companion-universal-macos.tar.gz`
          3. Make executable: `chmod +x bin/idb_companion`
          4. Replace your existing companion:
             ```bash
             cp bin/idb_companion /path/to/your/idb/bin/idb_companion
             ```
          5. Verify it's universal:
             ```bash
             lipo -info /path/to/your/idb/bin/idb_companion
             # Should show: "Architectures in the fat file: ... are: x86_64 arm64"
             ```
          
          ### Using Architecture-Specific Binary
          
          1. Download the appropriate binary for your system
          2. Extract: `tar -xzf idb-companion-[arch]-macos.tar.gz`
          3. Navigate into the directory: `cd idb-companion-[arch]`
          4. Make executable: `chmod +x bin/idb_companion`
          5. Move to your IDB installation
          
          ## Usage
          
          The IDB Companion is typically started automatically by the IDB client.
          
          Manual usage:
          ```bash
          ./bin/idb_companion --help
          ```
          
          ## System Requirements
          
          - macOS 13.0 or later
          - Xcode Command Line Tools (for some features)
          
          ## Code Signing
          
          These binaries are unsigned. If you're distributing an app with IDB Companion:
          
          1. Sign the binary with your Developer ID:
             ```bash
             codesign --force --sign "Developer ID Application: Your Name (TEAM_ID)" \
               --options runtime --timestamp bin/idb_companion
             ```
          
          2. Sign any frameworks in the Frameworks directory
          
          ## Testing
          
          All binaries have been built and tested on GitHub Actions runners.
          
          Built on: $(date)
          EOF
          
          cat COMPANION_RELEASE_NOTES.md
      
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: companion-release-notes
          path: COMPANION_RELEASE_NOTES.md
          retention-days: 30